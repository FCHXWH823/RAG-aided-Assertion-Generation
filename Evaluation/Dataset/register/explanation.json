{
"Assertion 1": {
"clock signal condition": "@(posedge clk)",
"disable condition": "disable iff (rst)",
"logical expression": "en |=> out == $past(in,1)",
"Signals": ["en", "out", "in"],
"Signal Explanations": {
  "en": "enable signal that controls when the register updates",
  "out": "the output signal of the register storing the data",
  "in": "the input signal that provides new data to the register"
},
"Logical Operators": ["|=>", "==", "$past"],
"Logical Operators Explanation": {
  "|=>": "non-overlapping implication, meaning that if the condition on the left is true at this cycle, then the condition on the right must hold at the next cycle",
  "==": "equality comparison, ensuring that two values are the same",
  "$past": "references the value of a signal from the previous clock cycle"
},
"Assertion Explaination": "if the condition that controls data loading is active, then the stored data becomes identical to the new data as it was one cycle ago"
},
"Assertion 2": {
"clock signal condition": "@(posedge clk)",
"disable condition": "disable iff (rst)",
"logical expression": "!en |=> out == $past(out,1)",
"Signals": ["en", "out"],
"Signal Explanations": {
  "en": "enable signal that controls when the register updates",
  "out": "the output signal of the register storing the data"
},
"Logical Operators": ["!", "|=>", "==", "$past"],
"Logical Operators Explanation": {
  "!": "logical negation, indicating the inverse of the condition",
  "|=>": "non-overlapping implication, meaning that if the condition on the left is true at this cycle, then the condition on the right must hold at the next cycle",
  "==": "equality comparison, ensuring that two values are the same",
  "$past": "references the value of a signal from the previous clock cycle"
},
"Assertion Explaination": "if the condition that controls data loading is inactive, then the stored data remains equal to the data held in the previous cycle"
}
}