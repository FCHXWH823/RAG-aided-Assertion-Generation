{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[0] && $past(arb_type == 3'd0)) |-> $past(req[0])",
    "Signals": ["gnt[0]", "arb_type", "req[0]"],
    "Signal Explanations": {
      "gnt[0]": "grant output for request 0",
      "arb_type": "arbitration type selector signal",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the first bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 0, then in the previous clock cycle the first bit of request input signal must be asserted from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[1] && $past(arb_type == 3'd0)) |-> $past(req[1] & ~req[0])",
    "Signals": ["gnt[1]", "arb_type", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[1]": "grant output for request 1",
      "arb_type": "arbitration type selector signal",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the second bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 0, then in the previous clock cycle the second bit of request input signal must be asserted and the first bit of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[2] && $past(arb_type == 3'd0)) |-> $past(req[2] & ~req[1] & ~req[0])",
    "Signals": ["gnt[2]", "arb_type", "req[2]", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[2]": "grant output for request 2",
      "arb_type": "arbitration type selector signal",
      "req[2]": "request input signal for request 2",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the third bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 0, then in the previous clock cycle the third bit of request input signal must be asserted and the first and second bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[3] && $past(arb_type == 3'd0)) |-> $past(req[3] & ~req[2] & ~req[1] & ~req[0])",
    "Signals": ["gnt[3]", "arb_type", "req[3]", "req[2]", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[3]": "grant output for request 3",
      "arb_type": "arbitration type selector signal",
      "req[3]": "request input signal for request 3",
      "req[2]": "request input signal for request 2",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the fourth bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 0, then in the previous clock cycle the fourth bit of request input signal must be asserted and the first, second, and third bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[0] && $past(arb_type == 3'd1)) |-> $past(req[0] & ~req[1])",
    "Signals": ["gnt[0]", "arb_type", "req[0]", "req[1]"],
    "Signal Explanations": {
      "gnt[0]": "grant output for request 0",
      "arb_type": "arbitration type selector signal",
      "req[0]": "request input signal for request 0",
      "req[1]": "request input signal for request 1"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the first bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 1, then in the previous clock cycle the first bit of request input signal must be asserted and the second bit of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[1] && $past(arb_type == 3'd1)) |-> $past(req[1])",
    "Signals": ["gnt[1]", "arb_type", "req[1]"],
    "Signal Explanations": {
      "gnt[1]": "grant output for request 1",
      "arb_type": "arbitration type selector signal",
      "req[1]": "request input signal for request 1"
    },
    "Logical Operators": ["&&", "|->", "$past", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the second bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 1, then in the previous clock cycle the second bit of request input signal must be asserted from the current clock cycle"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[2] && $past(arb_type == 3'd1)) |-> $past(req[2] & ~req[1] & ~req[0])",
    "Signals": ["gnt[2]", "arb_type", "req[2]", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[2]": "grant output for request 2",
      "arb_type": "arbitration type selector signal",
      "req[2]": "request input signal for request 2",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the third bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 1, then in the previous clock cycle the third bit of request input signal must be asserted and the first and second bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[3] && $past(arb_type == 3'd1)) |-> $past(req[3] & ~req[2] & ~req[1] & ~req[0])",
    "Signals": ["gnt[3]", "arb_type", "req[3]", "req[2]", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[3]": "grant output for request 3",
      "arb_type": "arbitration type selector signal",
      "req[3]": "request input signal for request 3",
      "req[2]": "request input signal for request 2",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the fourth bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 1, then in the previous clock cycle the fourth bit of request input signal must be asserted and the third, second and first bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[0] && $past(arb_type == 3'd2)) |-> $past(req[0] & ~req[2])",
    "Signals": ["gnt[0]", "arb_type", "req[0]", "req[2]"],
    "Signal Explanations": {
      "gnt[0]": "grant output for request 0",
      "arb_type": "arbitration type selector signal",
      "req[0]": "request input signal for request 0",
      "req[2]": "request input signal for request 2"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the first bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 2, then in the previous clock cycle the first bit of request input signal must be asserted and the third bit of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[1] && $past(arb_type == 3'd2)) |-> $past(req[1] & ~req[2] & ~req[0])",
    "Signals": ["gnt[1]", "arb_type", "req[1]", "req[2]", "req[0]"],
    "Signal Explanations": {
      "gnt[1]": "grant output for request 1",
      "arb_type": "arbitration type selector signal",
      "req[1]": "request input signal for request 1",
      "req[2]": "request input signal for request 2",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the second bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 2, then in the previous clock cycle the second bit of request input signal must be asserted and the third and first bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[2] && $past(arb_type == 3'd2)) |-> $past(req[2])",
    "Signals": ["gnt[2]", "arb_type", "req[2]"],
    "Signal Explanations": {
      "gnt[2]": "grant output for request 2",
      "arb_type": "arbitration type selector signal",
      "req[2]": "request input signal for request 2"
    },
    "Logical Operators": ["&&", "|->", "$past", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the third bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 2, then in the previous clock cycle the third bit of request input signal must be asserted from the current clock cycle"
  },
  "Assertion 12": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[3] && $past(arb_type == 3'd2)) |-> $past(req[3] & ~req[2] & ~req[1] & ~req[0])",
    "Signals": ["gnt[3]", "arb_type", "req[3]", "req[2]", "req[1]", "req[0]"],
    "Signal Explanations": {
      "gnt[3]": "grant output for request 3",
      "arb_type": "arbitration type selector signal",
      "req[3]": "request input signal for request 3",
      "req[2]": "request input signal for request 2",
      "req[1]": "request input signal for request 1",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the fourth bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 2, then in the previous clock cycle the fourth bit of request input signal must be asserted and the third, second and first bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 13": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[0] && $past(arb_type == 3'd3)) |-> $past(req[0] & ~req[3])",
    "Signals": ["gnt[0]", "arb_type", "req[0]", "req[3]"],
    "Signal Explanations": {
      "gnt[0]": "grant output for request 0",
      "arb_type": "arbitration type selector signal",
      "req[0]": "request input signal for request 0",
      "req[3]": "request input signal for request 3"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the first bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 3, then in the previous clock cycle the first bit of request input signal must be asserted and the fourth bit of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 14": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[1] && $past(arb_type == 3'd3)) |-> $past(req[1] & ~req[3] & ~req[0])",
    "Signals": ["gnt[1]", "arb_type", "req[1]", "req[3]", "req[0]"],
    "Signal Explanations": {
      "gnt[1]": "grant output for request 1",
      "arb_type": "arbitration type selector signal",
      "req[1]": "request input signal for request 1",
      "req[3]": "request input signal for request 3",
      "req[0]": "request input signal for request 0"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the second bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 3, then in the previous clock cycle the second bit of request input signal must be asserted and the fourth and first bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 15": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[2] && $past(arb_type == 3'd3)) |-> $past(req[2] & ~req[3] & ~req[0] & ~req[1])",
    "Signals": ["gnt[2]", "arb_type", "req[2]", "req[3]", "req[0]", "req[1]"],
    "Signal Explanations": {
      "gnt[2]": "grant output for request 2",
      "arb_type": "arbitration type selector signal",
      "req[2]": "request input signal for request 2",
      "req[3]": "request input signal for request 3",
      "req[0]": "request input signal for request 0",
      "req[1]": "request input signal for request 1"
    },
    "Logical Operators": ["&&", "|->", "$past", "&", "~", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "&": "logical and used to combine conditions",
      "~": "the value of a signal is inverted (logical not)",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the third bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 3, then in the previous clock cycle the third bit of request input signal must be asserted and the fourth, second and first bits of request input signal must not be asserted from the current clock cycle"
  },
  "Assertion 16": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (~rst_n)",
    "logical expression": "(gnt[3] && $past(arb_type == 3'd3)) |-> $past(req[3])",
    "Signals": ["gnt[3]", "arb_type", "req[3]"],
    "Signal Explanations": {
      "gnt[3]": "grant output for request 3",
      "arb_type": "arbitration type selector signal",
      "req[3]": "request input signal for request 3"
    },
    "Logical Operators": ["&&", "|->", "$past", "=="],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal in the previous clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "Property for checking the priority scheme that when the fourth bit of grant output is asserted and in the previous clock cycle the arbitration type selector signal was equal to 3, then in the previous clock cycle the fourth bit of request input signal must be asserted from the current clock cycle"
  }
}