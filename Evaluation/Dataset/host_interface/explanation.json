{
"Assertion 1": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(sample_bus == 1) |-> (HREADYOUT == 1)",
  "Signals": ["sample_bus", "HREADYOUT"],
  "Signal Explanations": {
    "sample_bus": "signal to control sampling of bus",
    "HREADYOUT": "HREADY signal outputed to Master"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if signal to control sampling of bus equals 1 then HREADY signal outputed to Master equals 1 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 2": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(buffer_read_en == 1 & read_wait == 1) |-> (HREADYOUT == 0)",
  "Signals": ["buffer_read_en", "read_wait", "HREADYOUT"],
  "Signal Explanations": {
    "buffer_read_en": "indicates reading operation request to CRC_DR register",
    "read_wait": "input signal indicating if a read operation should wait",
    "HREADYOUT": "HREADY signal outputed to Master"
  },
  "Logical Operators": ["==", "&", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "&": "logical and",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if reading operation request to CRC_DR register equals 1 and read_wait equals 1 then HREADY signal outputed to Master equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 3": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(ahb_enable == 0) |-> (HREADYOUT == 1)",
  "Signals": ["ahb_enable", "HREADYOUT"],
  "Signal Explanations": {
    "ahb_enable": "signal indicating AHB enable (active when htrans_pp equals NON_SEQ)",
    "HREADYOUT": "HREADY signal outputed to Master"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if AHB enable signal equals 0 then HREADY signal outputed to Master equals 1 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 4": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(write_en == 0) |-> (crc_idr_en == 0)",
  "Signals": ["write_en", "crc_idr_en"],
  "Signal Explanations": {
    "write_en": "write enable signal (derived from hselx_pp, hwrite_pp and ahb_enable)",
    "crc_idr_en": "write enable signal for CRC_IDR register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if write enable signal equals 0 then write enable for CRC_IDR register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 5": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(write_en == 1 & crc_idr_sel == 1) |-> (crc_idr_en == 1)",
  "Signals": ["write_en", "crc_idr_sel", "crc_idr_en"],
  "Signal Explanations": {
    "write_en": "write enable signal (derived from hselx_pp, hwrite_pp and ahb_enable)",
    "crc_idr_sel": "signal indicating selection (decoding) for CRC_IDR register",
    "crc_idr_en": "write enable signal for CRC_IDR register"
  },
  "Logical Operators": ["==", "&", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "&": "logical and",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if write enable signal equals 1 and CRC_IDR selection equals 1 then write enable for CRC_IDR register equals 1 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 6": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(crc_idr_sel == 0) |-> (crc_idr_en == 0)",
  "Signals": ["crc_idr_sel", "crc_idr_en"],
  "Signal Explanations": {
    "crc_idr_sel": "signal indicating selection (decoding) for CRC_IDR register",
    "crc_idr_en": "write enable signal for CRC_IDR register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if CRC_IDR selection equals 0 then write enable for CRC_IDR register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 7": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(hselx_pp == 0) |-> (crc_idr_en == 0)",
  "Signals": ["hselx_pp", "crc_idr_en"],
  "Signal Explanations": {
    "hselx_pp": "pipeline register capturing the HSElx input signal",
    "crc_idr_en": "write enable signal for CRC_IDR register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if pipeline HSElx signal equals 0 then write enable for CRC_IDR register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 8": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(hwrite_pp == 0) |-> (crc_idr_en == 0)",
  "Signals": ["hwrite_pp", "crc_idr_en"],
  "Signal Explanations": {
    "hwrite_pp": "pipeline register capturing the HWRITE input signal",
    "crc_idr_en": "write enable signal for CRC_IDR register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if pipeline HWRITE signal equals 0 then write enable for CRC_IDR register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 9": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(write_en == 0) |-> (crc_poly_en == 0)",
  "Signals": ["write_en", "crc_poly_en"],
  "Signal Explanations": {
    "write_en": "write enable signal (derived from hselx_pp, hwrite_pp and ahb_enable)",
    "crc_poly_en": "write enable signal for CRC_POL register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if write enable signal equals 0 then write enable for CRC_POL register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 10": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(hselx_pp == 0) |-> (crc_poly_en == 0)",
  "Signals": ["hselx_pp", "crc_poly_en"],
  "Signal Explanations": {
    "hselx_pp": "pipeline register capturing the HSElx input signal",
    "crc_poly_en": "write enable signal for CRC_POL register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if pipeline HSElx signal equals 0 then write enable for CRC_POL register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 11": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(hwrite_pp == 0) |-> (crc_poly_en == 0)",
  "Signals": ["hwrite_pp", "crc_poly_en"],
  "Signal Explanations": {
    "hwrite_pp": "pipeline register capturing the HWRITE input signal",
    "crc_poly_en": "write enable signal for CRC_POL register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if pipeline HWRITE signal equals 0 then write enable for CRC_POL register equals 0 SINCE THE SAME CLOCK CYCLE"
},
"Assertion 12": {
  "clock signal condition": "@(posedge HCLK)",
  "disable condition": "",
  "logical expression": "(haddr_pp[1] == 1) |-> (crc_poly_en == 0)",
  "Signals": ["haddr_pp[1]", "crc_poly_en"],
  "Signal Explanations": {
    "haddr_pp[1]": "bit 1 of the pipeline register capturing the HADDR input signal",
    "crc_poly_en": "write enable signal for CRC_POL register"
  },
  "Logical Operators": ["==", "|->", "=="],
  "Logical Operators Explanation": {
    "==": "equal",
    "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion Explaination": "if bit 1 of the pipeline HADDR signal equals 1 then write enable for CRC_POL register equals 0 SINCE THE SAME CLOCK CYCLE"
}
}