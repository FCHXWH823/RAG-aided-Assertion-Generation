{
"Assertion 1": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "bus_grant[0] + bus_grant[1] + bus_grant[2] < 2",
  "Signals": ["bus_grant[0]", "bus_grant[1]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["+", "<"],
  "Logical Operators Explanation": {
    "+": "arithmetic addition of binary values",
    "<": "checks if the left value is less than the right value"
  },
  "Assertion Explaination": "the sum of the three individual grant indicator bits is compared against the value two to ensure that at most one grant indicator is active at any given time"
},
"Assertion 2": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "bus_grant[0] |-> (!bus_grant[1] && !bus_grant[2])",
  "Signals": ["bus_grant[0]", "bus_grant[1]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["|->", "!", "&&"],
  "Logical Operators Explanation": {
    "|->": "non-overlapping implication that states if the left condition is true then the right condition must hold in the relevant cycle",
    "!": "logical NOT",
    "&&": "logical AND, which requires both conditions be true"
  },
  "Assertion Explaination": "when the grant indicator for master 0 is active, it implies that both the grant indicators for master 1 and master 2 are inactive"
},
"Assertion 3": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "bus_grant[1] |-> (!bus_grant[0] && !bus_grant[2])",
  "Signals": ["bus_grant[1]", "bus_grant[0]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["|->", "!", "&&"],
  "Logical Operators Explanation": {
    "|->": "non-overlapping implication indicating that if the left condition holds then the right condition must follow",
    "!": "logical NOT",
    "&&": "logical AND which confirms that all combined conditions must be true"
  },
  "Assertion Explaination": "when the grant indicator for master 1 is active, it implies that both the grant indicator for master 0 and master 2 are inactive"
},
"Assertion 4": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "bus_grant[2] |-> (!bus_grant[1] && !bus_grant[0])",
  "Signals": ["bus_grant[2]", "bus_grant[1]", "bus_grant[0]"],
  "Signal Explanations": {
    "bus_grant[2]": "the grant indicator bit for master 2",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[0]": "the grant indicator bit for master 0"
  },
  "Logical Operators": ["|->", "!", "&&"],
  "Logical Operators Explanation": {
    "|->": "non-overlapping implication meaning that if the left part is true then the right part must hold",
    "!": "logical NOT",
    "&&": "logical AND that requires both conditions to be satisfied"
  },
  "Assertion Explaination": "when the grant indicator for master 2 is active, it implies that both the grant indicators for master 1 and master 0 are inactive"
},
"Assertion 5": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "bus_grant != NO_GRANT && bus_ack != 1 |=> $stable(bus_grant)",
  "Signals": ["bus_grant", "NO_GRANT", "bus_ack"],
  "Signal Explanations": {
    "bus_grant": "the overall grant vector indicating which master is granted access",
    "NO_GRANT": "a constant vector representing the state of no active grant",
    "bus_ack": "the acknowledgement signal indicating that a currently granted operation has been completed"
  },
  "Logical Operators": ["!=", "&&", "|=>", "$stable"],
  "Logical Operators Explanation": {
    "!=": "inequality, checking that two signals are not equal",
    "&&": "logical AND ensuring all combined conditions are true",
    "|=>": "non-overlapping implication indicating that if the left side holds then the right side must follow in the next evaluation",
    "$stable": "a system function that verifies that the signal value has not changed from the previous clock cycle"
  },
  "Assertion Explaination": "when the overall grant vector signals an active grant (i.e. it does not equal the no-grant constant) and the acknowledgement signal is not asserted, it implies that the grant vector will remain unchanged in the following cycle"
},
"Assertion 6": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "(bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[0]) |=> (bus_grant[0] && !bus_grant[1] && !bus_grant[2])",
  "Signals": ["bus_req[0]", "bus_grant", "NO_GRANT", "bus_ack", "bus_grant[0]", "bus_grant[1]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_req[0]": "the request signal for master 0",
    "bus_grant": "the overall grant vector indicating current grant status",
    "NO_GRANT": "a constant vector denoting that no grant is active",
    "bus_ack": "the acknowledgement signal indicating completion of the current grant operation",
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["&&", "==", "||", "|=>", "&&", "!"],
  "Logical Operators Explanation": {
    "&&": "logical AND which requires both conditions to be true",
    "==": "equality check ensuring two signals are identical",
    "||": "logical OR meaning at least one of the conditions must be true",
    "|=>": "non-overlapping implication indicating that if the left condition is true then the right condition must hold in the next cycle",
    "!": "logical NOT which inverts the condition"
  },
  "Assertion Explaination": "if master 0 is requesting access while no grant is currently active, or if an acknowledgement is received while master 0 is requesting, then it implies that only master 0 will be granted access and both master 1 and master 2 will have inactive grant indicators"
},
"Assertion 7": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "(bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[1] && !bus_req[0]) |=> (!bus_grant[0] && bus_grant[1] && !bus_grant[2])",
  "Signals": ["bus_req[1]", "bus_req[0]", "bus_grant", "NO_GRANT", "bus_ack", "bus_grant[0]", "bus_grant[1]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_req[1]": "the request signal for master 1",
    "bus_req[0]": "the request signal for master 0",
    "bus_grant": "the overall grant vector indicating current grant status",
    "NO_GRANT": "a constant vector representing no active grant",
    "bus_ack": "the acknowledgement signal that denotes the completion of a granted operation",
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["&&", "!", "==", "||", "|=>", "&&", "!"],
  "Logical Operators Explanation": {
    "&&": "logical AND, meaning all conditions must be true",
    "!": "logical NOT, which inverts a condition",
    "==": "equality check to compare signal values",
    "||": "logical OR, meaning at least one condition must be true",
    "|=>": "non-overlapping implication specifying that if the left side holds then the right side must hold in the subsequent cycle"
  },
  "Assertion Explaination": "if master 1 is requesting access while master 0 is not requesting and no grant is currently active, or if an acknowledgement is received together with master 1â€™s request while master 0 is not requesting, then it implies that only master 1 will be granted access and both master 0 and master 2 will have inactive grant indicators"
},
"Assertion 8": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "(bus_req[2] && !bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[2] && !bus_req[0] && !bus_req[1]) |=> (!bus_grant[0] && !bus_grant[1] && bus_grant[2])",
  "Signals": ["bus_req[2]", "bus_req[1]", "bus_req[0]", "bus_grant", "NO_GRANT", "bus_ack", "bus_grant[0]", "bus_grant[1]", "bus_grant[2]"],
  "Signal Explanations": {
    "bus_req[2]": "the request signal for master 2",
    "bus_req[1]": "the request signal for master 1",
    "bus_req[0]": "the request signal for master 0",
    "bus_grant": "the overall grant vector indicating current grant status",
    "NO_GRANT": "a constant vector representing that no grant is active",
    "bus_ack": "the acknowledgement signal indicating that a granted operation is done",
    "bus_grant[0]": "the grant indicator bit for master 0",
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_grant[2]": "the grant indicator bit for master 2"
  },
  "Logical Operators": ["&&", "!", "==", "||", "|=>", "&&", "!"],
  "Logical Operators Explanation": {
    "&&": "logical AND which requires all listed conditions to be true",
    "!": "logical NOT that inverts a condition",
    "==": "equality check to verify exact match",
    "||": "logical OR meaning at least one of the conditions must be true",
    "|=>": "non-overlapping implication indicating that if the left-hand side is true then the right-hand side must subsequently hold"
  },
  "Assertion Explaination": "if master 2 is requesting access while neither master 0 nor master 1 are requesting and no grant is active, or if an acknowledgement is received together with master 2â€™s request while master 0 and master 1 are not requesting, then it implies that only master 2 will be granted access and both master 0 and master 1 will have inactive grant indicators"
},
"Assertion 9": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "$rose(bus_grant[1]) |-> ($past(bus_req[1]) && !$past(bus_req[0]))",
  "Signals": ["bus_grant[1]", "bus_req[1]", "bus_req[0]"],
  "Signal Explanations": {
    "bus_grant[1]": "the grant indicator bit for master 1",
    "bus_req[1]": "the request signal for master 1",
    "bus_req[0]": "the request signal for master 0"
  },
  "Logical Operators": ["$rose", "|->", "$past", "&&", "!"],
  "Logical Operators Explanation": {
    "$rose": "detects a rising edge transition of a signal",
    "|->": "non-overlapping implication meaning that if the condition on the left is met then the condition on the right must hold in the subsequent evaluation",
    "$past": "refers to the value of a signal in the previous clock cycle",
    "&&": "logical AND requiring all conditions to be true",
    "!": "logical NOT that negates the condition"
  },
  "Assertion Explaination": "if a rising edge is detected on the grant indicator for master 1, it implies that in the previous cycle the request for master 1 was active and the request for master 0 was inactive"
},
"Assertion 10": {
  "clock signal condition": "@(posedge clk)",
  "disable condition": "",
  "logical expression": "$rose(bus_grant[2]) |-> ($past(bus_req[2]) && !$past(bus_req[1]) && !$past(bus_req[0]))",
  "Signals": ["bus_grant[2]", "bus_req[2]", "bus_req[1]", "bus_req[0]"],
  "Signal Explanations": {
    "bus_grant[2]": "the grant indicator bit for master 2",
    "bus_req[2]": "the request signal for master 2",
    "bus_req[1]": "the request signal for master 1",
    "bus_req[0]": "the request signal for master 0"
  },
  "Logical Operators": ["$rose", "|->", "$past", "&&", "!"],
  "Logical Operators Explanation": {
    "$rose": "detects a rising edge transition of a signal",
    "|->": "non-overlapping implication meaning that if the left condition holds then the right condition must follow in the next evaluation",
    "$past": "retrieves the value of a signal from the previous clock cycle",
    "&&": "logical AND ensuring all conditions are simultaneously true",
    "!": "logical NOT which inverts a condition"
  },
  "Assertion Explaination": "if a rising edge is detected on the grant indicator for master 2, it implies that in the previous cycle the request for master 2 was active while the requests for master 1 and master 0 were inactive"
}
}