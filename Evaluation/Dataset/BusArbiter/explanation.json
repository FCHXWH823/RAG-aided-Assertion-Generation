{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[0] + bus_grant[1] + bus_grant[2] < 2",
    "Signals": [
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "+",
      "<"
    ],
    "Logical Operators Explanation": {
      "+": "arithmetic addition",
      "<": "less than"
    },
    "Assertion Explaination": "the arithmetic addition of the first output grant bit, the second output grant bit, and the third output grant bit is computed and the result must be less than 2"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[0] |-> (!bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "When the first output grant bit is asserted, then the second output grant bit and the third output grant bit must be reset (0) from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[1] |-> (!bus_grant[0] && !bus_grant[2])",
    "Signals": [
      "bus_grant[1]",
      "bus_grant[0]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "When the second output grant bit is asserted, then the first output grant bit and the third output grant bit must be reset (0) from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[2] |-> (!bus_grant[1] && !bus_grant[0])",
    "Signals": [
      "bus_grant[2]",
      "bus_grant[1]",
      "bus_grant[0]"
    ],
    "Signal Explanations": {
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "When the third output grant bit is asserted, then the second output grant bit and the first output grant bit must be reset (0) from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant != NO_GRANT && bus_ack != 1 |=> $stable(bus_grant)",
    "Signals": [
      "bus_grant",
      "NO_GRANT",
      "bus_ack"
    ],
    "Signal Explanations": {
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal"
    },
    "Logical Operators": [
      "!=",
      "&&",
      "|=>",
      "$stable"
    ],
    "Logical Operators Explanation": {
      "!=": "not equal",
      "&&": "logical and",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE",
      "$stable": "indicates that the signal remains constant for at least one clock cycle"
    },
    "Assertion Explaination": "when the output bus grant vector is not equal to the constant vector representing no grant and the bus acknowledge signal is not asserted, then the output bus grant vector must remain constant from the next clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[0]) |=> (bus_grant[0] && !bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "==",
      "||",
      "|=>",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "when either the first bit of bus request signal is asserted and the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal and the first bit of bus request signal are asserted, then the first output grant bit must be asserted and the second and third output grant bits must be reset (0) from the next clock cycle "
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[1] && !bus_req[0]) |=> (!bus_grant[0] && bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_req[1]",
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "!",
      "==",
      "||",
      "|=>",
      "&&"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "!": "the value of a signal is reset (0)",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when either the second bit of bus request signal is asserted and the first bit of bus request signal is reset and the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal is asserted and the second bit of bus request signal is asserted and the first bit of bus request signal is reset, then the second output grant bit must be asserted and the first and third output grant bits must be reset (0) from the next clock cycle"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[2] && !bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[2] && !bus_req[0] && !bus_req[1]) |=> (!bus_grant[0] && !bus_grant[1] && bus_grant[2])",
    "Signals": [
      "bus_req[2]",
      "bus_req[1]",
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[2]": "third bit of the bus request vector representing request from master 2",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "!",
      "==",
      "||",
      "|=>",
      "&&"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "!": "the value of a signal is reset (0)",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when either the third bus request bit is asserted and the second and first bus request bits are reset and the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal is asserted and the third bus request bit is asserted and the first and second bus request bits are reset, then the third output grant bit must be asserted and the first and second output grant bits must be reset (0) from the next clock cycle "
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "$rose(bus_grant[1]) |-> ($past(bus_req[1]) && !$past(bus_req[0]))",
    "Signals": [
      "bus_grant[1]",
      "bus_req[1]",
      "bus_req[0]"
    ],
    "Signal Explanations": {
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0"
    },
    "Logical Operators": [
      "$rose",
      "|->",
      "$past",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "$rose": "a function that returns true when a signal transitions from 0 to 1",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal from the previous clock cycle",
      "&&": "logical and",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "when a rising edge is detected on the second output grant bit, then the second bus request bit in the last clock cycle was asserted and the first bus request bit in the last clock cycle was reset (0) from the current clock cycle "
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "$rose(bus_grant[2]) |-> ($past(bus_req[2]) && !$past(bus_req[1]) && !$past(bus_req[0]))",
    "Signals": [
      "bus_grant[2]",
      "bus_req[2]",
      "bus_req[1]",
      "bus_req[0]"
    ],
    "Signal Explanations": {
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2",
      "bus_req[2]": "third bit of the bus request vector representing request from master 2",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0"
    },
    "Logical Operators": [
      "$rose",
      "|->",
      "$past",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "$rose": "a function that returns true when a signal transitions from 0 to 1",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal from the previous clock cycle",
      "&&": "logical and",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "when a rising edge is detected on the third output grant bit, then the third bus request bit in the last clock cycle was asserted and the second and first bus request bits in the last clock cycle were reset (0) from the current clock cycle "
  }
}