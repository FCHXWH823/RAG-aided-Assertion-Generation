{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[0] + bus_grant[1] + bus_grant[2] < 2",
    "Signals": [
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "+",
      "<"
    ],
    "Logical Operators Explanation": {
      "+": "arithmetic addition",
      "<": "less than"
    },
    "Assertion Explaination": "the arithmetic addition of the first output grant bit, the second output grant bit, and the third output grant bit is computed and the result must be less than 2, ensuring that at most one grant signal is active SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[0] |-> (!bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "if the first output grant bit is asserted then the second output grant bit and the third output grant bit must be reset (0) SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[1] |-> (!bus_grant[0] && !bus_grant[2])",
    "Signals": [
      "bus_grant[1]",
      "bus_grant[0]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0",
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "if the second output grant bit is asserted then the first output grant bit and the third output grant bit must be reset (0) SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant[2] |-> (!bus_grant[1] && !bus_grant[0])",
    "Signals": [
      "bus_grant[2]",
      "bus_grant[1]",
      "bus_grant[0]"
    ],
    "Signal Explanations": {
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2",
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_grant[0]": "first bit of the output bus_grant vector representing grant signal for master 0"
    },
    "Logical Operators": [
      "|->",
      "!",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and"
    },
    "Assertion Explaination": "if the third output grant bit is asserted then the second output grant bit and the first output grant bit must be reset (0) SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "bus_grant != NO_GRANT && bus_ack != 1 |=> $stable(bus_grant)",
    "Signals": [
      "bus_grant",
      "NO_GRANT",
      "bus_ack"
    ],
    "Signal Explanations": {
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal"
    },
    "Logical Operators": [
      "!=",
      "&&",
      "|=>",
      "$stable"
    ],
    "Logical Operators Explanation": {
      "!=": "not equal",
      "&&": "logical and",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE",
      "$stable": "indicates that the signal remains constant for at least one clock cycle"
    },
    "Assertion Explaination": "if the output bus grant vector is not equal to the constant vector representing no grant and the bus acknowledge signal is not asserted, then the output bus grant vector must remain constant SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[0]) |=> (bus_grant[0] && !bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "==",
      "||",
      "|=>",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "if either the first bus request is asserted while the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal is asserted along with the first bus request being asserted, then in the next clock cycle the first output grant bit must be asserted and the second and third output grant bits must be reset (0)"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[1] && !bus_req[0]) |=> (!bus_grant[0] && bus_grant[1] && !bus_grant[2])",
    "Signals": [
      "bus_req[1]",
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "!",
      "==",
      "||",
      "|=>",
      "&&"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "!": "the value of a signal is reset (0)",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if either the second bus request is asserted with the first bus request reset and the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal is asserted along with the second bus request being asserted and the first bus request reset, then in the next clock cycle the second output grant bit must be asserted while the first and third output grant bits must be reset (0)"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "(bus_req[2] && !bus_req[1] && !bus_req[0] && bus_grant == NO_GRANT) || (bus_ack && bus_req[2] && !bus_req[0] && !bus_req[1]) |=> (!bus_grant[0] && !bus_grant[1] && bus_grant[2])",
    "Signals": [
      "bus_req[2]",
      "bus_req[1]",
      "bus_req[0]",
      "bus_grant",
      "NO_GRANT",
      "bus_ack",
      "bus_grant[0]",
      "bus_grant[1]",
      "bus_grant[2]"
    ],
    "Signal Explanations": {
      "bus_req[2]": "third bit of the bus request vector representing request from master 2",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0",
      "bus_grant": "output bus grant vector",
      "NO_GRANT": "constant arb_vector with all bits reset (0) representing no grant",
      "bus_ack": "bus acknowledge signal",
      "bus_grant[0]": "first bit of the output bus grant vector representing grant signal for master 0",
      "bus_grant[1]": "second bit of the output bus grant vector representing grant signal for master 1",
      "bus_grant[2]": "third bit of the output bus grant vector representing grant signal for master 2"
    },
    "Logical Operators": [
      "&&",
      "!",
      "==",
      "||",
      "|=>",
      "&&"
    ],
    "Logical Operators Explanation": {
      "&&": "logical and",
      "!": "the value of a signal is reset (0)",
      "==": "equal",
      "||": "or",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if either the third bus request is asserted with the second and first bus requests reset and the output bus grant vector equals the constant vector representing no grant, or the bus acknowledge signal is asserted along with the third bus request being asserted and the first and second bus requests reset, then in the next clock cycle the third output grant bit must be asserted while the first and second output grant bits must be reset (0)"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "$rose(bus_grant[1]) |-> ($past(bus_req[1]) && !$past(bus_req[0]))",
    "Signals": [
      "bus_grant[1]",
      "bus_req[1]",
      "bus_req[0]"
    ],
    "Signal Explanations": {
      "bus_grant[1]": "second bit of the output bus_grant vector representing grant signal for master 1",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0"
    },
    "Logical Operators": [
      "$rose",
      "|->",
      "$past",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "$rose": "a function that returns true when a signal transitions from 0 to 1",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal from the previous clock cycle",
      "&&": "logical and",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "if a rising edge is detected on the second output grant bit then in the same clock cycle the previous clock cycle's second bus request was asserted and the previous clock cycle's first bus request was reset (0)"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "$rose(bus_grant[2]) |-> ($past(bus_req[2]) && !$past(bus_req[1]) && !$past(bus_req[0]))",
    "Signals": [
      "bus_grant[2]",
      "bus_req[2]",
      "bus_req[1]",
      "bus_req[0]"
    ],
    "Signal Explanations": {
      "bus_grant[2]": "third bit of the output bus_grant vector representing grant signal for master 2",
      "bus_req[2]": "third bit of the bus request vector representing request from master 2",
      "bus_req[1]": "second bit of the bus request vector representing request from master 1",
      "bus_req[0]": "first bit of the bus request vector representing request from master 0"
    },
    "Logical Operators": [
      "$rose",
      "|->",
      "$past",
      "&&",
      "!"
    ],
    "Logical Operators Explanation": {
      "$rose": "a function that returns true when a signal transitions from 0 to 1",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "the value of a signal from the previous clock cycle",
      "&&": "logical and",
      "!": "the value of a signal is reset (0)"
    },
    "Assertion Explaination": "if a rising edge is detected on the third output grant bit then in the same clock cycle the previous clock cycle's third bus request was asserted while the previous clock cycle's second and first bus requests were reset (0)"
  }
}