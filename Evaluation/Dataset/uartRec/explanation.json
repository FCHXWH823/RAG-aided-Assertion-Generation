{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(stateReg[0] == 0) |-> (rxDoneTick == 0)",
    "Signals": [
      "stateReg",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "stateReg": "current state register of the UART FSM",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the least significant bit of the current state register is 0, then the flag indicating UART reception completion must be 0 from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(sReg[2] == 0) |=> (rxDoneTick == 0)",
    "Signals": [
      "sReg",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "sReg": "current sampling counter register in the UART receiver",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|=>"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when the third bit of the sampling counter is 0, then the UART reception done flag must be 0 from the next clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(sReg[1] == 0) |=> (rxDoneTick == 0)",
    "Signals": [
      "sReg",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "sReg": "current sampling counter register in the UART receiver",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|=>"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when the second bit of the sampling counter is 0, then the UART reception done flag signal must be 0 from the next clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(nReg[1] == 0) |=> (rxDoneTick == 0)",
    "Signals": [
      "nReg",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "nReg": "current bit counter register tracking the number of received data bits",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|=>"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when the second bit of the bit counter is 0, then the UART reception done flag signal must be 0 from the next clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(nReg[0] == 0) |=> (rxDoneTick == 0)",
    "Signals": [
      "nReg",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "nReg": "current bit counter register tracking the number of received data bits",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|=>"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when the least significant bit of the bit counter is 0, then the UART reception done flag signal must be 0 from the next clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(sTick == 0) |-> (rxDoneTick == 0)",
    "Signals": [
      "sTick",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "sTick": "the sampling tick signal used to trigger sampling in the UART receiver",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the sampling tick signal is 0, then the UART reception done flag signal must be 0 from the next clock cycle"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(sNext[0] == 0) |=> (rxDoneTick == 0)",
    "Signals": [
      "sNext",
      "rxDoneTick"
    ],
    "Signal Explanations": {
      "sNext": "next value of the sampling counter register",
      "rxDoneTick": "flag indicating that UART reception is completed"
    },
    "Logical Operators": [
      "==",
      "|=>"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "when the first bit of the next sampling counter value is 0, then the UART reception done flag signal must be 0 from the next clock cycle"
  }
}