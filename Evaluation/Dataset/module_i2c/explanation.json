{
"Assertion 1": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(fifo_rx_f_empty == 1) |-> (RX_EMPTY == 1)",
"Signals": ["fifo_rx_f_empty", "RX_EMPTY"],
"Signal Explanations": {
"fifo_rx_f_empty": "a flag input indicating whether the FIFO receiver is empty",
"RX_EMPTY": "an output flag that reflects the emptiness status of the receiver interface"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the FIFO receiver empty flag is equal to 1 then the receiver empty output must also be equal to 1 since the current clock cycle"
},
"Assertion 2": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(fifo_rx_f_empty == 0) |-> (RX_EMPTY == 0)",
"Signals": ["fifo_rx_f_empty", "RX_EMPTY"],
"Signal Explanations": {
"fifo_rx_f_empty": "a flag input indicating whether the FIFO receiver is empty",
"RX_EMPTY": "an output flag that reflects the emptiness status of the receiver interface"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the FIFO receiver empty flag is equal to 0 then the receiver empty output must also be equal to 0 since the current clock cycle"
},
"Assertion 3": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(fifo_rx_f_empty == 1) |-> (RX_EMPTY == 1)",
"Signals": ["fifo_rx_f_empty", "RX_EMPTY"],
"Signal Explanations": {
"fifo_rx_f_empty": "a flag input indicating whether the FIFO receiver is empty",
"RX_EMPTY": "an output flag that reflects the emptiness status of the receiver interface"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the FIFO receiver empty flag is equal to 1 then the receiver empty output must also be equal to 1 since the current clock cycle"
},
"Assertion 4": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(fifo_rx_f_empty == 0) |-> (RX_EMPTY == 0)",
"Signals": ["fifo_rx_f_empty", "RX_EMPTY"],
"Signal Explanations": {
"fifo_rx_f_empty": "a flag input indicating whether the FIFO receiver is empty",
"RX_EMPTY": "an output flag that reflects the emptiness status of the receiver interface"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the FIFO receiver empty flag is equal to 0 then the receiver empty output must also be equal to 0 since the current clock cycle"
},
"Assertion 5": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(DATA_CONFIG_REG[1] == 0) |-> (ERROR == 0)",
"Signals": ["DATA_CONFIG_REG[1]", "ERROR"],
"Signal Explanations": {
"DATA_CONFIG_REG[1]": "the second bit of the configuration register that controls I2C operation parameters",
"ERROR": "an output signal which indicates an error condition, based on the configuration bits of the module"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the second configuration register bit is equal to 0 then the error indicator must be equal to 0 since the current clock cycle"
},
"Assertion 6": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(DATA_CONFIG_REG[0] == 0) |-> (ERROR == 0)",
"Signals": ["DATA_CONFIG_REG[0]", "ERROR"],
"Signal Explanations": {
"DATA_CONFIG_REG[0]": "the first bit of the configuration register that controls I2C operation parameters",
"ERROR": "an output signal which indicates an error condition, based on the configuration bits of the module"
},
"Logical Operators": ["==", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"|->": "an overlapping implication operator meaning that if the condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if the first configuration register bit is equal to 0 then the error indicator must be equal to 0 since the current clock cycle"
},
"Assertion 7": {
"clock signal condition": "@(posedge PCLK)",
"disable condition": "",
"logical expression": "(DATA_CONFIG_REG[0] == 1 & DATA_CONFIG_REG[1] == 1) |-> (ERROR == 1)",
"Signals": ["DATA_CONFIG_REG[0]", "DATA_CONFIG_REG[1]", "ERROR"],
"Signal Explanations": {
"DATA_CONFIG_REG[0]": "the first bit of the configuration register that controls I2C operation parameters",
"DATA_CONFIG_REG[1]": "the second bit of the configuration register that controls I2C operation parameters",
"ERROR": "an output signal which indicates an error condition, based on the configuration bits of the module"
},
"Logical Operators": ["==", "&", "|->"],
"Logical Operators Explanation": {
"==": "equality comparison which tests if both sides have the same value",
"&": "a logical AND that combines conditions of multiple signals",
"|->": "an overlapping implication operator meaning that if the combined condition on the left holds then the condition on the right must hold since the current clock cycle"
},
"Assertion Explaination": "if both the first and second configuration register bits are equal to 1 then the error indicator must be equal to 1 since the current clock cycle"
}
}