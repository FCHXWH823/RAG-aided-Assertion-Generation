{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(fifo_rx_f_empty == 1) |-> (RX_EMPTY == 1)",
    "Signals": [
      "fifo_rx_f_empty",
      "RX_EMPTY"
    ],
    "Signal Explanations": {
      "fifo_rx_f_empty": "indicator signal that shows if the FIFO receiver is empty",
      "RX_EMPTY": "output signal representing the empty status of the FIFO receiver"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the FIFO receiver empty indicator equals 1, then the FIFO receiver empty output equals 1 from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(fifo_rx_f_empty == 0) |-> (RX_EMPTY == 0)",
    "Signals": [
      "fifo_rx_f_empty",
      "RX_EMPTY"
    ],
    "Signal Explanations": {
      "fifo_rx_f_empty": "indicator signal that shows if the FIFO receiver is empty",
      "RX_EMPTY": "output signal representing the empty status of the FIFO receiver"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the FIFO receiver empty indicator equals 0, then the FIFO receiver empty output equals 0 from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(fifo_rx_f_empty == 1) |-> (RX_EMPTY == 1)",
    "Signals": [
      "fifo_rx_f_empty",
      "RX_EMPTY"
    ],
    "Signal Explanations": {
      "fifo_rx_f_empty": "indicator signal that shows if the FIFO receiver is empty",
      "RX_EMPTY": "output signal representing the empty status of the FIFO receiver"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the FIFO receiver empty indicator equals 1, then the FIFO receiver empty output equals 1 from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(fifo_rx_f_empty == 0) |-> (RX_EMPTY == 0)",
    "Signals": [
      "fifo_rx_f_empty",
      "RX_EMPTY"
    ],
    "Signal Explanations": {
      "fifo_rx_f_empty": "indicator signal that shows if the FIFO receiver is empty",
      "RX_EMPTY": "output signal representing the empty status of the FIFO receiver"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the FIFO receiver empty indicator equals 0, then the FIFO receiver empty output equals 0 from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(DATA_CONFIG_REG[1] == 0) |-> (ERROR == 0)",
    "Signals": [
      "DATA_CONFIG_REG[1]",
      "ERROR"
    ],
    "Signal Explanations": {
      "DATA_CONFIG_REG[1]": "the second bit (bit 1) of the configuration register",
      "ERROR": "error indicator signal"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the second bit of the configuration register equals 0, then the error signal equals 0 from the current clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(DATA_CONFIG_REG[0] == 0) |-> (ERROR == 0)",
    "Signals": [
      "DATA_CONFIG_REG[0]",
      "ERROR"
    ],
    "Signal Explanations": {
      "DATA_CONFIG_REG[0]": "the first bit (bit 0) of the configuration register",
      "ERROR": "error indicator signal"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the first bit of the configuration register equals 0, then the error signal equals 0 from the current clock cycle"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(DATA_CONFIG_REG[0] == 1 & DATA_CONFIG_REG[1] == 1) |-> (ERROR == 1)",
    "Signals": [
      "DATA_CONFIG_REG[0]",
      "DATA_CONFIG_REG[1]",
      "ERROR"
    ],
    "Signal Explanations": {
      "DATA_CONFIG_REG[0]": "the first bit (bit 0) of the configuration register",
      "DATA_CONFIG_REG[1]": "the second bit (bit 1) of the configuration register",
      "ERROR": "error indicator signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when the first bit of the configuration register equals 1 and the second bit of the configuration register equals 1, then the error signal equals 1 from the current clock cycle"
  }
}