{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(txNext == 0) |=> (tx == 0)",
    "Signals": [
      "txNext",
      "tx"
    ],
    "Signal Explanations": {
      "txNext": "next value of the transmit register; this signal holds the value that will update the transmit register in the next clock cycle",
      "tx": "transmit bit‐stream output signal; this is the actual serial output of the UART transmitter"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if next value of the transmit register is equal to 0, then the transmit bit-stream output should be equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(txNext == 1) |=> (tx == 1)",
    "Signals": [
      "txNext",
      "tx"
    ],
    "Signal Explanations": {
      "txNext": "next value of the transmit register; this signal holds the value that will update the transmit register in the next clock cycle",
      "tx": "transmit bit‐stream output signal; this is the actual serial output of the UART transmitter"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "a non-overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if next value of the transmit register is equal to 1, then the transmit bit-stream output should be equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(stateReg[0] == 1) |-> (txDoneTick == 0)",
    "Signals": [
      "stateReg[0]",
      "txDoneTick"
    ],
    "Signal Explanations": {
      "stateReg[0]": "the least significant bit of the current state register, representing a particular state condition in the FSM",
      "txDoneTick": "transmit done tick signal that indicates completion of a transmit cycle"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the least significant bit of the current state register is equal to 1, then the transmit done tick signal should be equal to 0 SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(txStart == 0) |-> (txDoneTick == 0)",
    "Signals": [
      "txStart",
      "txDoneTick"
    ],
    "Signal Explanations": {
      "txStart": "transmit start signal that indicates the initiation of a transmission",
      "txDoneTick": "transmit done tick signal that indicates completion of a transmit cycle"
    },
    "Logical Operators": [
      "==",
      "|->",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the transmit start signal is equal to 0, then the transmit done tick signal should be equal to 0 SINCE THE SAME CLOCK CYCLE"
  }
}