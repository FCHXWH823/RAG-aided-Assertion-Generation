{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "no_more_dslot |-> (except_itlbmiss == 0 && except_immufault == 0 && except_ibuserr == 0)",
    "Signals": ["no_more_dslot", "except_itlbmiss", "except_immufault", "except_ibuserr"],
    "Signal Explanations": {
      "no_more_dslot": "input signal indicating that there is no delay slot instruction",
      "except_itlbmiss": "output signal indicating an ITLB miss exception",
      "except_immufault": "output signal indicating an immediate fault exception",
      "except_ibuserr": "output signal indicating an instruction bus error exception"
    },
    "Logical Operators": ["|->", "==", "&&"],
    "Logical Operators Explanation": {
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "==": "equal",
      "&&": "and"
    },
    "Assertion Explaination": "if no delay slot instruction signal is true then ITLB miss exception equals 0 and immediate fault exception equals 0 and instruction bus error exception equals 0 SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 saved == 1",
    "Signals": ["if_flushpipe", "save_insn", "saved"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "saved": "flag indicating if an instruction has been saved"
    },
    "Logical Operators": ["!", "&&", "|->", "##1", "=="],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and save instruction condition is true then saved flag equals 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze)) |-> ##1 saved == 0",
    "Signals": ["if_flushpipe", "save_insn", "if_freeze", "saved"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "if_freeze": "input signal indicating a pipeline freeze",
      "saved": "flag indicating if an instruction has been saved"
    },
    "Logical Operators": ["|", "!", "&&", "|->", "##1", "=="],
    "Logical Operators Explanation": {
      "|": "or",
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "if pipeline flush signal is true or both save instruction condition is reset (0) and pipeline freeze is reset (0) then saved flag equals 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn && !icpu_err_i) |-> ##1 (insn_saved == $past(icpu_dat_i))",
    "Signals": ["if_flushpipe", "save_insn", "icpu_err_i", "insn_saved", "icpu_dat_i"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "icpu_err_i": "input signal indicating an instruction cache error",
      "insn_saved": "register holding the saved instruction",
      "icpu_dat_i": "input data from the instruction cache"
    },
    "Logical Operators": ["!", "&&", "|->", "##1", "==", "$past"],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal",
      "$past": "the value from the previous clock cycle"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and save instruction condition is true and instruction cache error signal is reset (0) then insn_saved equals the previous clock cycle's instruction cache data SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze) && !icpu_err_i) |-> ##1 (insn_saved == {6'b000101, 26'h041_0000})",
    "Signals": ["if_flushpipe", "save_insn", "if_freeze", "icpu_err_i", "insn_saved"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "if_freeze": "input signal indicating a pipeline freeze",
      "icpu_err_i": "input signal indicating an instruction cache error",
      "insn_saved": "register holding the saved instruction"
    },
    "Logical Operators": ["!", "&&", "|", "|->", "##1", "=="],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|": "or",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "if pipeline flush signal is true or both save instruction condition is reset (0) and pipeline freeze is reset (0) and instruction cache error is reset (0) then insn_saved equals the constant value {6'b000101, 26'h041_0000} SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && (save_insn | !if_freeze)) |-> ##1 (addr_saved == {$past(icpu_adr_i[31:2]), 2'b00})",
    "Signals": ["if_flushpipe", "save_insn", "if_freeze", "addr_saved", "icpu_adr_i"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "if_freeze": "input signal indicating a pipeline freeze",
      "addr_saved": "register holding the saved instruction address",
      "icpu_adr_i": "input signal providing the instruction cache address"
    },
    "Logical Operators": ["!", "&&", "|", "|->", "##1", "==", "$past"],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|": "or",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal",
      "$past": "the value from the previous clock cycle"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and either save instruction is true or pipeline freeze is reset (0) then addr_saved equals the previous clock cycle's instruction cache address with its lower two bits set to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe) |-> ##1 (addr_saved == 32'h00000000)",
    "Signals": ["if_flushpipe", "addr_saved"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "addr_saved": "register holding the saved instruction address"
    },
    "Logical Operators": ["|->", "##1", "=="],
    "Logical Operators Explanation": {
      "|->": "if the condition on the left is met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "if pipeline flush signal is true then addr_saved equals 32'h00000000 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[0] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hd)))",
    "Signals": ["if_flushpipe", "save_insn", "err_saved[0]", "icpu_err_i", "icpu_tag_i"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "err_saved[0]": "bit 0 of the saved error register representing an ITLB miss",
      "icpu_err_i": "input signal indicating an instruction cache error",
      "icpu_tag_i": "input signal providing the instruction cache tag"
    },
    "Logical Operators": ["!", "&&", "|->", "##1", "==", "&", "$past"],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal",
      "&": "and",
      "$past": "the value from the previous clock cycle"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and save instruction condition is true then bit 0 of the saved error register equals the logical AND of the previous clock cycle's instruction cache error signal and the result of comparing the previous clock cycle's instruction cache tag signal equal to 4'hd SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[1] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hc)))",
    "Signals": ["if_flushpipe", "save_insn", "err_saved[1]", "icpu_err_i", "icpu_tag_i"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "err_saved[1]": "bit 1 of the saved error register representing an immediate fault",
      "icpu_err_i": "input signal indicating an instruction cache error",
      "icpu_tag_i": "input signal providing the instruction cache tag"
    },
    "Logical Operators": ["!", "&&", "|->", "##1", "==", "&", "$past"],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal",
      "&": "and",
      "$past": "the value from the previous clock cycle"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and save instruction condition is true then bit 1 of the saved error register equals the logical AND of the previous clock cycle's instruction cache error signal and the result of comparing the previous clock cycle's instruction cache tag signal equal to 4'hc SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[2] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hb)))",
    "Signals": ["if_flushpipe", "save_insn", "err_saved[2]", "icpu_err_i", "icpu_tag_i"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "err_saved[2]": "bit 2 of the saved error register representing an instruction bus error",
      "icpu_err_i": "input signal indicating an instruction cache error",
      "icpu_tag_i": "input signal providing the instruction cache tag"
    },
    "Logical Operators": ["!", "&&", "|->", "##1", "==", "&", "$past"],
    "Logical Operators Explanation": {
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal",
      "&": "and",
      "$past": "the value from the previous clock cycle"
    },
    "Assertion Explaination": "if pipeline flush signal is reset (0) and save instruction condition is true then bit 2 of the saved error register equals the logical AND of the previous clock cycle's instruction cache error signal and the result of comparing the previous clock cycle's instruction cache tag signal equal to 4'hb SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze)) |-> ##1 (err_saved == 3'b000)",
    "Signals": ["if_flushpipe", "save_insn", "if_freeze", "err_saved"],
    "Signal Explanations": {
      "if_flushpipe": "input signal indicating pipeline flush",
      "save_insn": "wire signal indicating that an instruction should be saved",
      "if_freeze": "input signal indicating a pipeline freeze",
      "err_saved": "register holding the saved error tags for the instruction"
    },
    "Logical Operators": ["|", "!", "&&", "|->", "##1", "=="],
    "Logical Operators Explanation": {
      "|": "or",
      "!": "the value of a signal is negated",
      "&&": "and",
      "|->": "if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE (modified by a delay)",
      "##1": "a temporal delay operator indicating that the consequent is checked SINCE NEXT CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "if pipeline flush signal is true or both save instruction condition is reset (0) and pipeline freeze is reset (0) then err_saved equals 3'b000 SINCE NEXT CLOCK CYCLE"
  }
}