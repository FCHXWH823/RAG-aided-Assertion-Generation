{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "no_more_dslot |-> (except_itlbmiss == 0 && except_immufault == 0 && except_ibuserr == 0)",
    "Signals": [
      "no_more_dslot",
      "except_itlbmiss",
      "except_immufault",
      "except_ibuserr"
    ],
    "Signal Explanations": {
      "no_more_dslot": "signal indicating that there is no additional delay slot instruction",
      "except_itlbmiss": "signal indicating an instruction TLB miss exception",
      "except_immufault": "signal indicating an instruction immediate memory fault exception",
      "except_ibuserr": "signal indicating an instruction bus error exception"
    },
    "Logical Operators": [
      "|->",
      "==",
      "&&"
    ],
    "Logical Operators Explanation": {
      "|->": "if the left‐side condition is true then the right‐side condition is required to hold",
      "==": "equality check between two values",
      "&&": "logical AND ensuring both conditions are true"
    },
    "Assertion Explaination": "if the signal indicating absence of a delay slot is active then it must follow that the exception indicator for a translation lookaside buffer miss, the exception indicator for an immediate fault, and the exception indicator for an instruction bus error are all equal to zero"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 saved == 1",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "saved"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "saved": "flag that indicates the fetched instruction and related data have been saved"
    },
    "Logical Operators": [
      "!",
      "&&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT, meaning the condition is inverted",
      "&&": "logical AND, meaning both conditions must be true",
      "|->": "implication: if the condition on the left is true then the condition on the right must follow",
      "##1": "delay operator indicating the condition must be met one clock cycle later",
      "==": "equality to verify that two values are the same"
    },
    "Assertion Explaination": "if the signal indicating a pipeline flush is not active and the condition for saving the instruction is true then in the next cycle the flag indicating that the instruction has been saved must be equal to one"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze)) |-> ##1 saved == 0",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "if_freeze",
      "saved"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "if_freeze": "signal indicating that the instruction fetch stage is frozen",
      "saved": "flag that indicates the fetched instruction and related data have been saved"
    },
    "Logical Operators": [
      "|",
      "!",
      "&&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "|": "logical OR meaning at least one of the conditions must be true",
      "!": "logical NOT, meaning the condition is inverted",
      "&&": "logical AND requiring both conditions to be true",
      "|->": "implication: if the left-hand side condition is met then the right-hand side condition must follow",
      "##1": "delay operator specifying the next clock cycle",
      "==": "equality check to ensure both sides are identical"
    },
    "Assertion Explaination": "if either the signal for flushing the pipeline is active or both the condition for saving is false and the signal for freezing the instruction fetch stage is inactive, then one clock cycle later the flag indicating that the instruction has been saved must be equal to zero"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn && !icpu_err_i) |-> ##1 (insn_saved == $past(icpu_dat_i))",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "icpu_err_i",
      "insn_saved",
      "icpu_dat_i"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "icpu_err_i": "signal from the instruction cache interface that indicates an error",
      "insn_saved": "register holding the saved instruction",
      "icpu_dat_i": "data input carrying the fetched instruction from the instruction cache interface"
    },
    "Logical Operators": [
      "!",
      "&&",
      "|->",
      "##1",
      "==",
      "$past"
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT, indicating a condition is false",
      "&&": "logical AND where all conditions must be true",
      "|->": "implication meaning that if the left-hand side condition holds then the right-hand side must follow",
      "##1": "delay operator signifying the condition must be satisfied one clock cycle later",
      "==": "equality check to verify both sides are identical",
      "$past": "function that retrieves the value of a signal from the previous clock cycle"
    },
    "Assertion Explaination": "if the signal for flushing the pipeline is inactive, the condition for saving the instruction is true, and the error signal from the instruction cache is not active then one cycle later the register holding the saved instruction must equal the value that was present on the instruction data input in the previous cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze)) |-> ##1 (insn_saved == {6'b000101, 26'h041_0000})",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "if_freeze",
      "insn_saved"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "if_freeze": "signal indicating that the instruction fetch stage is frozen",
      "insn_saved": "register holding the saved instruction"
    },
    "Logical Operators": [
      "|",
      "!",
      "&&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "|": "logical OR meaning that at least one of the enclosed conditions is true",
      "!": "logical NOT, meaning the condition is inverted",
      "&&": "logical AND requiring both sub-conditions to be true",
      "|->": "implication indicating that if the left-hand side condition holds, then the right-hand side condition must follow",
      "##1": "delay operator meaning the condition must hold in the next clock cycle",
      "==": "equality check ensuring that both sides are equal"
    },
    "Assertion Explaination": "if either the signal to flush the pipeline is active or both the condition for saving the instruction is false and the signal indicating a freeze in the instruction fetch stage is inactive then one clock cycle later the register holding the saved instruction must equal the constant representing a no-operation instruction"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && (save_insn | !if_freeze)) |-> ##1 (addr_saved == {$past(icpu_adr_i[31:2]), 2'b00})",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "if_freeze",
      "addr_saved",
      "icpu_adr_i"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "if_freeze": "signal indicating that the instruction fetch stage is frozen",
      "addr_saved": "register holding the saved instruction address",
      "icpu_adr_i": "address input from the instruction cache interface"
    },
    "Logical Operators": [
      "!",
      "|",
      "&&",
      "|->",
      "##1",
      "==",
      "$past"
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT meaning the condition is false",
      "|": "logical OR meaning at least one of the conditions is true",
      "&&": "logical AND requiring both conditions to be true",
      "|->": "implication that if the left-hand side condition holds then the right-hand side condition must follow",
      "##1": "delay operator signifying that the condition must hold one clock cycle later",
      "==": "equality check verifying that two values are identical",
      "$past": "function retrieving the value of a signal from the previous clock cycle"
    },
    "Assertion Explaination": "if the signal for flushing the pipeline is inactive and either the condition for saving the instruction is true or the freeze signal is inactive then one cycle later the register holding the saved address must equal the value formed by taking the upper bits of the previous cycle's address input and appending two zeros"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe) |-> ##1 (addr_saved == 32'h00000000)",
    "Signals": [
      "if_flushpipe",
      "addr_saved"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "addr_saved": "register holding the saved instruction address"
    },
    "Logical Operators": [
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "|->": "implication meaning that if the left-hand side condition is true then the right-hand side condition must follow",
      "##1": "delay operator indicating the next clock cycle",
      "==": "equality check used to confirm both sides are the same"
    },
    "Assertion Explaination": "if the flush signal for the pipeline is active then one clock cycle later the register holding the saved address must be equal to zero"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[0] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hd)))",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "err_saved[0]",
      "icpu_err_i",
      "icpu_tag_i"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "err_saved[0]": "bit in the saved error register corresponding to a TLB miss exception",
      "icpu_err_i": "signal from the instruction cache interface indicating an error",
      "icpu_tag_i": "tag input from the instruction cache interface used to classify the type of error"
    },
    "Logical Operators": [
      "!",
      "&&",
      "|->",
      "##1",
      "==",
      "$past",
      "&"
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT meaning the condition is false",
      "&&": "logical AND requiring both conditions to be true",
      "|->": "implication indicating that if the left-hand side condition holds then the right-hand side condition must subsequently hold",
      "##1": "delay operator meaning that the consequent must be true in the next clock cycle",
      "==": "equality check ensuring both sides match",
      "$past": "function that provides the value of a signal from the previous clock cycle",
      "&": "bitwise AND used here to combine a previous error signal with a comparison result"
    },
    "Assertion Explaination": "if the pipeline flush signal is inactive and the condition for saving the instruction is true then one cycle later the bit in the saved error register corresponding to a translation lookaside buffer miss must equal the result of the bitwise AND of the previous cycle's error signal and the condition that the previous cycle's tag equals the hexadecimal value d"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[1] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hc)))",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "err_saved[1]",
      "icpu_err_i",
      "icpu_tag_i"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "err_saved[1]": "bit in the saved error register corresponding to an immediate memory fault exception",
      "icpu_err_i": "signal from the instruction cache interface indicating an error",
      "icpu_tag_i": "tag input from the instruction cache interface used to classify the type of error"
    },
    "Logical Operators": [
      "!",
      "&&",
      "|->",
      "##1",
      "==",
      "$past",
      "&"
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT indicating the inverted condition",
      "&&": "logical AND requiring both conditions to be true",
      "|->": "implication meaning that if the left-hand side holds then the right-hand side must follow",
      "##1": "delay operator specifying that the check is performed one clock cycle later",
      "==": "equality check ensuring both sides are identical",
      "$past": "function that returns the value of a signal from the previous cycle",
      "&": "bitwise AND combining the previous error signal and the result of the previous tag equality test"
    },
    "Assertion Explaination": "if the flush signal is inactive and the condition to save the instruction is true then one cycle later the bit in the saved error register for an immediate memory fault must equal the result of bitwise AND of the previous cycle's error signal with the condition that the previous cycle's error tag equals the hexadecimal value c"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!if_flushpipe && save_insn) |-> ##1 (err_saved[2] == ($past(icpu_err_i) & ($past(icpu_tag_i) == 4'hb)))",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "err_saved[2]",
      "icpu_err_i",
      "icpu_tag_i"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "err_saved[2]": "bit in the saved error register corresponding to an instruction bus error exception",
      "icpu_err_i": "signal from the instruction cache interface indicating an error",
      "icpu_tag_i": "tag input from the instruction cache interface used to classify the type of error"
    },
    "Logical Operators": [
      "!",
      "&&",
      "|->",
      "##1",
      "==",
      "$past",
      "&"
    ],
    "Logical Operators Explanation": {
      "!": "logical NOT meaning the condition is false",
      "&&": "logical AND requiring that both conditions are true simultaneously",
      "|->": "implication meaning that if the left-hand condition holds then the right-hand condition must subsequently hold",
      "##1": "delay operator indicating that the consequent is evaluated one clock cycle later",
      "==": "equality check verifying that both sides are identical",
      "$past": "function retrieving the value of a signal from the previous cycle",
      "&": "bitwise AND used to combine the previous error signal with the outcome of the previous tag equality check"
    },
    "Assertion Explaination": "if the flush signal is inactive and the condition for saving the instruction is true then one cycle later the bit in the saved error register for an instruction bus error must equal the result of the bitwise AND of the error signal from the previous cycle with the test that the previous cycle's error tag is equal to the hexadecimal value b"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(if_flushpipe | (!save_insn && !if_freeze)) |-> ##1 (err_saved == 3'b000)",
    "Signals": [
      "if_flushpipe",
      "save_insn",
      "if_freeze",
      "err_saved"
    ],
    "Signal Explanations": {
      "if_flushpipe": "signal indicating a request to flush the instruction pipeline",
      "save_insn": "signal that becomes true when the current instruction must be saved",
      "if_freeze": "signal indicating that the instruction fetch stage is frozen",
      "err_saved": "register holding the saved error tags for the fetched instruction"
    },
    "Logical Operators": [
      "|",
      "!",
      "&&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "|": "logical OR meaning at least one of the conditions must hold",
      "!": "logical NOT indicating the inversion of a condition",
      "&&": "logical AND meaning both conditions must be true",
      "|->": "implication meaning that if the left-hand side condition holds then the right-hand side must follow",
      "##1": "delay operator specifying that the condition is evaluated in the next clock cycle",
      "==": "equality check ensuring both sides are the same"
    },
    "Assertion Explaination": "if either the signal to flush the pipeline is active or both the condition for saving the instruction is false and the signal indicating a freeze in the instruction fetch stage is inactive then one cycle later the register holding the saved error tags must equal zero for all bits"
  }
}