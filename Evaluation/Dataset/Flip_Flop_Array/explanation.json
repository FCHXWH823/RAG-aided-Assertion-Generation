{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "~(rd & wr) | (rd & wr & error)",
    "Signals": [
      "rd",
      "wr",
      "error"
    ],
    "Signal Explanations": {
      "rd": "read operation signal of the verilog module",
      "wr": "write operation signal of the verilog module",
      "error": "error flag output of the verilog module"
    },
    "Logical Operators": [
      "~",
      "&",
      "|"
    ],
    "Logical Operators Explanation": {
      "~": "logical negation operator meaning that the condition is inverted",
      "&": "logical and operator meaning that the conditions on both sides must hold",
      "|": "logical or operator meaning that at least one of the conditions must hold"
    },
    "Assertion Explaination": "if read operation signal and write operation signal are both active, then error signal should be active from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "~(~data_v_q & rd_en) | (~data_v_q & rd_en & (dout == '0))",
    "Signals": [
      "data_v_q",
      "rd_en",
      "dout"
    ],
    "Signal Explanations": {
      "data_v_q": "vector of valid bits for each entry in the flip-flop array",
      "rd_en": "read enable vector where each bit corresponds to whether the address is selected for reading",
      "dout": "data output signal of the verilog module"
    },
    "Logical Operators": [
      "~",
      "&",
      "|",
      "=="
    ],
    "Logical Operators Explanation": {
      "~": "logical negation operator meaning that the condition is inverted",
      "&": "logical and operator meaning that the conditions on both sides must hold",
      "|": "logical or operator meaning that at least one of the conditions must hold",
      "==": "equality comparison operator meaning that the two values are equal"
    },
    "Assertion Explaination": "if the condition where data valid indicator is not active and read enable is active holds, then data output must equal zero from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "$onehot0(rd_v)",
    "Signals": [
      "rd_v"
    ],
    "Signal Explanations": {
      "rd_v": "read valid signal computed as the and of the valid bits of the flip-flop array and the read enable vector"
    },
    "Logical Operators": [
      "$onehot0"
    ],
    "Logical Operators Explanation": {
      "$onehot0": "a function that checks that the vector has either no bits set or exactly one bit set"
    },
    "Assertion Explaination": "the read valid signal must have at most one bit active"
  }
}