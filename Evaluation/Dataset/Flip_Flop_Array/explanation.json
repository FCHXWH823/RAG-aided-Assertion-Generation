{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "~(rd & wr) | (rd & wr & error)",
    "Signals": ["rd", "wr", "error"],
    "Signal Explanations": {
      "rd": "read control signal indicating a read operation request",
      "wr": "write control signal indicating a write operation request",
      "error": "error indicator output that flags either an invalid simultaneous read and write or a failed read due to missing valid data"
    },
    "Logical Operators": ["~", "&", "|"],
    "Logical Operators Explanation": {
      "~": "logical NOT, indicating inversion of a condition",
      "&": "logical AND, indicating that all combined conditions must be satisfied simultaneously",
      "|": "logical OR, indicating that at least one of the conditions is satisfied"
    },
    "Assertion Explaination": "if both the read control and write control conditions are active in the current clock cycle then the error indicator must be active; if they are not both active then the error condition is not required"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "~(~data_v_q & rd_en) | (~data_v_q & rd_en & (dout == '0))",
    "Signals": ["data_v_q", "rd_en", "dout"],
    "Signal Explanations": {
      "data_v_q": "register that tracks which register file elements hold valid data",
      "rd_en": "read enable signal derived from a read operation request combined with a matching address",
      "dout": "data output signal delivering read data from the register file"
    },
    "Logical Operators": ["~", "&", "|", "=="],
    "Logical Operators Explanation": {
      "~": "logical NOT, representing the inversion of a condition",
      "&": "logical AND, representing that multiple conditions must be met concurrently",
      "|": "logical OR, representing that at least one condition is satisfied",
      "==": "equality comparison to ensure both sides are identical"
    },
    "Assertion Explaination": "if a register file element without valid stored data is accessed via the read enable condition then the resultant data output must be zero in the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "none",
    "logical expression": "$onehot0(rd_v)",
    "Signals": ["rd_v"],
    "Signal Explanations": {
      "rd_v": "signal generated by combining valid data indicators with read enable conditions for register file elements"
    },
    "Logical Operators": ["$onehot0"],
    "Logical Operators Explanation": {
      "$onehot0": "a property function checking that the given signal vector has at most one active (high) bit, meaning it either conforms to a strict one-hot encoding or contains no active bits"
    },
    "Assertion Explaination": "the combined valid data indication and read enable condition must allow at most a single active assertion in the current clock cycle"
  }
}