{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && sel_a == 2'd2 && $stable(ex_forw) && $stable(sel_a)) |-> muxed_a == ex_forw",
    "Signals": ["ex_freeze", "id_freeze", "sel_a", "ex_forw", "muxed_a"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_a": "selection signal for operand A multiplexer",
      "ex_forw": "execution forwarding data for operand A",
      "muxed_a": "operand A multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand A indicates the constant value corresponding to 2'd2, and both the execution forwarding data for operand A and the selection signal for operand A remain stable, the operand A multiplexer output equals the execution forwarding data for operand A"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && sel_a == 2'd3 && $stable(wb_forw) && $stable(sel_a)) |-> muxed_a == wb_forw",
    "Signals": ["ex_freeze", "id_freeze", "sel_a", "wb_forw", "muxed_a"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_a": "selection signal for operand A multiplexer",
      "wb_forw": "write-back forwarding data for operand A",
      "muxed_a": "operand A multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand A indicates the constant value corresponding to 2'd3, and both the write-back forwarding data for operand A and the selection signal for operand A remain stable, the operand A multiplexer output equals the write-back forwarding data for operand A"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && !(sel_a == 2'd2 || sel_a == 2'd3) && $stable(rf_dataa) && $stable(sel_a) && !$isunknown(operand_a)) |-> muxed_a == rf_dataa",
    "Signals": ["ex_freeze", "id_freeze", "sel_a", "rf_dataa", "operand_a", "muxed_a"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_a": "selection signal for operand A multiplexer",
      "rf_dataa": "register file data for operand A",
      "operand_a": "stored operand A value",
      "muxed_a": "operand A multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "||", "!", "$isunknown", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0) or inverts the condition",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "||": "logical OR",
      "$isunknown": "checks if a signal has an unknown (X or Z) value",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand A does not indicate the constant values corresponding to 2'd2 or 2'd3, the register file data for operand A and the selection signal for operand A remain stable, and the stored operand A value is known, the operand A multiplexer output equals the register file data for operand A"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && sel_b == 2'd1 && $stable(simm) && $stable(sel_b)) |-> muxed_b == simm",
    "Signals": ["ex_freeze", "id_freeze", "sel_b", "simm", "muxed_b"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_b": "selection signal for operand B multiplexer",
      "simm": "signed immediate value",
      "muxed_b": "operand B multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand B indicates the constant value corresponding to 2'd1, and both the signed immediate value and the selection signal for operand B remain stable, the operand B multiplexer output equals the signed immediate value"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && sel_b == 2'd2 && $stable(ex_forw) && $stable(sel_b)) |-> muxed_b == ex_forw",
    "Signals": ["ex_freeze", "id_freeze", "sel_b", "ex_forw", "muxed_b"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_b": "selection signal for operand B multiplexer",
      "ex_forw": "execution forwarding data for operand B",
      "muxed_b": "operand B multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand B indicates the constant value corresponding to 2'd2, and both the execution forwarding data for operand B and the selection signal for operand B remain stable, the operand B multiplexer output equals the execution forwarding data for operand B"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && sel_b == 2'd3 && $stable(wb_forw) && $stable(sel_b)) |-> muxed_b == wb_forw",
    "Signals": ["ex_freeze", "id_freeze", "sel_b", "wb_forw", "muxed_b"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_b": "selection signal for operand B multiplexer",
      "wb_forw": "write-back forwarding data for operand B",
      "muxed_b": "operand B multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand B indicates the constant value corresponding to 2'd3, and both the write-back forwarding data for operand B and the selection signal for operand B remain stable, the operand B multiplexer output equals the write-back forwarding data for operand B"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff(rst)",
    "logical expression": "$rose(!ex_freeze && !id_freeze) ##1 (!ex_freeze && !id_freeze && !(sel_b == 2'd1 || sel_b == 2'd2 || sel_b == 2'd3) && $stable(rf_datab) && $stable(sel_b)) |-> muxed_b == rf_datab",
    "Signals": ["ex_freeze", "id_freeze", "sel_b", "rf_datab", "muxed_b"],
    "Signal Explanations": {
      "ex_freeze": "execution stage freeze signal",
      "id_freeze": "instruction decode stage freeze signal",
      "sel_b": "selection signal for operand B multiplexer",
      "rf_datab": "register file data for operand B",
      "muxed_b": "operand B multiplexer output"
    },
    "Logical Operators": ["$rose", "!", "&&", "##1", "==", "$stable", "||", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "$rose": "detects that the condition transitions from false to true (rising edge)",
      "!": "the value of a signal is reset (0) or inverts the condition",
      "&&": "logical AND",
      "##1": "delay operator that postpones evaluation by one clock cycle",
      "==": "equal",
      "$stable": "ensures that the signal value remains unchanged during the evaluation cycle",
      "||": "logical OR",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if a rising edge is detected on the condition that the execution stage freeze signal is not active and the instruction decode stage freeze signal is not active, then after a one clock cycle delay if the execution stage freeze signal remains not active, the instruction decode stage freeze signal remains not active, the selection signal for operand B does not indicate the constant values corresponding to 2'd1, 2'd2, or 2'd3, and both the register file data for operand B and the selection signal for operand B remain stable, the operand B multiplexer output equals the register file data for operand B"
  }
}