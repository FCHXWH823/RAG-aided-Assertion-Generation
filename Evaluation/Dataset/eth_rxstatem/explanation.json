{
  "Assertion 1": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartPreamble == 1) |=> (StatePreamble == 1)",
    "Signals": [
      "StartPreamble",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StartPreamble": "a wire signal indicating the start of the preamble state",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the preamble state is equal to 1 then a register bit representing the preamble state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartDrop == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "StartDrop",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the drop state is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateSFD == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "StateSFD",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StateSFD": "a register bit representing the SFD state",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the SFD state is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateData[0] == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "StateData[0]",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StateData[0]": "the lower bit of the data state",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the lower bit of the data state is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateDrop == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "StateDrop",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StateDrop": "a register bit representing the drop state",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the drop state is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateData1 == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "StateData1",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "StateData1": "a register bit representing data state one",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing data state one is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StatePreamble == 1 & MRxDEq5 == 0 & MRxDV == 1) |=> (StatePreamble == 1)",
    "Signals": [
      "StatePreamble",
      "MRxDEq5",
      "MRxDV"
    ],
    "Signal Explanations": {
      "StatePreamble": "a register bit representing the preamble state",
      "MRxDEq5": "a signal indicating that the receive data equals 5",
      "MRxDV": "the receive data valid signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the preamble state is equal to 1 and a signal indicating that the receive data equals 5 is equal to 0 and the receive data valid signal is equal to 1 then a register bit representing the preamble state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDEq5 == 1) |=> (StatePreamble == 0)",
    "Signals": [
      "MRxDEq5",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "MRxDEq5": "a signal indicating that the receive data equals 5",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a signal indicating that the receive data equals 5 is equal to 1 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDV == 0) |=> (StatePreamble == 0)",
    "Signals": [
      "MRxDV",
      "StatePreamble"
    ],
    "Signal Explanations": {
      "MRxDV": "the receive data valid signal",
      "StatePreamble": "a register bit representing the preamble state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive data valid signal is equal to 0 then a register bit representing the preamble state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartSFD == 1) |=> (StateSFD == 1)",
    "Signals": [
      "StartSFD",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StartSFD": "a wire signal indicating the start of the SFD state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the SFD state is equal to 1 then a register bit representing the SFD state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartIdle == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StartIdle",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StartIdle": "a wire signal indicating the start of the idle state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the idle state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 12": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartDrop == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StartDrop",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the drop state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 13": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartData0 == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StartData0",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StartData0": "a wire signal indicating the start of data state 0",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of data state 0 is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 14": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartPreamble == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StartPreamble",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StartPreamble": "a wire signal indicating the start of the preamble state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the preamble state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 15": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateSFD == 1 & StartIdle == 0 & MRxDEqD == 0) |=> (StateSFD == 1)",
    "Signals": [
      "StateSFD",
      "StartIdle",
      "MRxDEqD"
    ],
    "Signal Explanations": {
      "StateSFD": "a register bit representing the SFD state",
      "StartIdle": "a wire signal indicating the start of the idle state",
      "MRxDEqD": "a signal indicating that the receive data equals D"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the SFD state is equal to 1 and a wire signal indicating the start of the idle state is equal to 0 and a signal indicating that the receive data equals D is equal to 0 then a register bit representing the SFD state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 16": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateData[0] == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StateData[0]",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StateData[0]": "the lower bit of the data state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the lower bit of the data state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 17": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateDrop == 1) |=> (StateSFD == 0)",
    "Signals": [
      "StateDrop",
      "StateSFD"
    ],
    "Signal Explanations": {
      "StateDrop": "a register bit representing the drop state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the drop state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 18": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDEq5 == 0 & StatePreamble == 1) |=> (StateSFD == 0)",
    "Signals": [
      "MRxDEq5",
      "StatePreamble",
      "StateSFD"
    ],
    "Signal Explanations": {
      "MRxDEq5": "a signal indicating that the receive data equals 5",
      "StatePreamble": "a register bit representing the preamble state",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a signal indicating that the receive data equals 5 is equal to 0 and a register bit representing the preamble state is equal to 1 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 19": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDV == 0) |=> (StateSFD == 0)",
    "Signals": [
      "MRxDV",
      "StateSFD"
    ],
    "Signal Explanations": {
      "MRxDV": "the receive data valid signal",
      "StateSFD": "a register bit representing the SFD state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive data valid signal is equal to 0 then a register bit representing the SFD state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 20": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartIdle == 1) |=> (StateDrop == 0)",
    "Signals": [
      "StartIdle",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StartIdle": "a wire signal indicating the start of the idle state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the idle state is equal to 1 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 21": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartDrop == 1) |=> (StateDrop == 1)",
    "Signals": [
      "StartDrop",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the drop state is equal to 1 then a register bit representing the drop state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 22": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateDrop == 1 & StartIdle == 0) |=> (StateDrop == 1)",
    "Signals": [
      "StateDrop",
      "StartIdle"
    ],
    "Signal Explanations": {
      "StateDrop": "a register bit representing the drop state",
      "StartIdle": "a wire signal indicating the start of the idle state"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the drop state is equal to 1 and a wire signal indicating the start of the idle state is equal to 0 then a register bit representing the drop state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 23": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateSFD == 1 & StartDrop == 0) |=> (StateDrop == 0)",
    "Signals": [
      "StateSFD",
      "StartDrop",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StateSFD": "a register bit representing the SFD state",
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the SFD state is equal to 1 and a wire signal indicating the start of the drop state is equal to 0 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 24": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateData[0] == 1 & StartDrop == 0) |=> (StateDrop == 0)",
    "Signals": [
      "StateData[0]",
      "StartDrop",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StateData[0]": "the lower bit of the data state",
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the lower bit of the data state is equal to 1 and a wire signal indicating the start of the drop state is equal to 0 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 25": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StatePreamble == 1) |=> (StateDrop == 0)",
    "Signals": [
      "StatePreamble",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StatePreamble": "a register bit representing the preamble state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing the preamble state is equal to 1 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 26": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StateData1 == 1) |=> (StateDrop == 0)",
    "Signals": [
      "StateData1",
      "StateDrop"
    ],
    "Signal Explanations": {
      "StateData1": "a register bit representing data state one",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a register bit representing data state one is equal to 1 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 27": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDV == 0) |=> (StateDrop == 0)",
    "Signals": [
      "MRxDV",
      "StateDrop"
    ],
    "Signal Explanations": {
      "MRxDV": "the receive data valid signal",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive data valid signal is equal to 0 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 28": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(Transmitting == 0 & StateIdle == 1) |=> (StateDrop == 0)",
    "Signals": [
      "Transmitting",
      "StateIdle",
      "StateDrop"
    ],
    "Signal Explanations": {
      "Transmitting": "a signal indicating that the transmitter is active",
      "StateIdle": "a register bit representing the idle state",
      "StateDrop": "a register bit representing the drop state"
    },
    "Logical Operators": [
      "==",
      "&",
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a signal indicating that the transmitter is active is equal to 0 and a register bit representing the idle state is equal to 1 then a register bit representing the drop state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 29": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartIdle == 1) |=> (StateIdle == 1)",
    "Signals": [
      "StartIdle",
      "StateIdle"
    ],
    "Signal Explanations": {
      "StartIdle": "a wire signal indicating the start of the idle state",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the idle state is equal to 1 then a register bit representing the idle state is equal to 1 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 30": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartDrop == 1) |=> (StateIdle == 0)",
    "Signals": [
      "StartDrop",
      "StateIdle"
    ],
    "Signal Explanations": {
      "StartDrop": "a wire signal indicating the start of the drop state",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the drop state is equal to 1 then a register bit representing the idle state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 31": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartSFD == 1) |=> (StateIdle == 0)",
    "Signals": [
      "StartSFD",
      "StateIdle"
    ],
    "Signal Explanations": {
      "StartSFD": "a wire signal indicating the start of the SFD state",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the SFD state is equal to 1 then a register bit representing the idle state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 32": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(StartPreamble == 1) |=> (StateIdle == 0)",
    "Signals": [
      "StartPreamble",
      "StateIdle"
    ],
    "Signal Explanations": {
      "StartPreamble": "a wire signal indicating the start of the preamble state",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if a wire signal indicating the start of the preamble state is equal to 1 then a register bit representing the idle state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 33": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDV == 1) |=> (StateIdle == 0)",
    "Signals": [
      "MRxDV",
      "StateIdle"
    ],
    "Signal Explanations": {
      "MRxDV": "the receive data valid signal",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive data valid signal is equal to 1 then a register bit representing the idle state is equal to 0 SINCE NEXT CLOCK CYCLE"
  },
  "Assertion 34": {
    "clock signal condition": "@(posedge MRxClk)",
    "disable condition": "",
    "logical expression": "(MRxDV == 0) |=> (StateIdle == 1)",
    "Signals": [
      "MRxDV",
      "StateIdle"
    ],
    "Signal Explanations": {
      "MRxDV": "the receive data valid signal",
      "StateIdle": "a register bit representing the idle state"
    },
    "Logical Operators": [
      "==",
      "|=>",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|=>": "if the conditions on the left are met then the condition on the right must hold SINCE NEXT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive data valid signal is equal to 0 then a register bit representing the idle state is equal to 1 SINCE NEXT CLOCK CYCLE"
  }
}