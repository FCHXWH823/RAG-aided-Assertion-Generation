{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(state == 1 & req2 == 1) |-> (gnt1 == 0)",
    "Signals": ["state", "req2", "gnt1"],
    "Signal Explanations": {
      "state": "internal state signal",
      "req2": "request signal from client 2",
      "gnt1": "grant signal for client 1"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when internal state signal equals 1 and request signal from client 2 equals 1, then grant signal for client 1 equals 0 from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req1 == 1 & state == 0) |-> (gnt1 == 1)",
    "Signals": ["req1", "state", "gnt1"],
    "Signal Explanations": {
      "req1": "request signal from client 1",
      "state": "internal state signal",
      "gnt1": "grant signal for client 1"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 1 equals 1 and internal state signal equals 0, then grant signal for client 1 equals 1 from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req1 == 0) |-> (gnt1 == 0)",
    "Signals": ["req1", "gnt1"],
    "Signal Explanations": {
      "req1": "request signal from client 1",
      "gnt1": "grant signal for client 1"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 1 equals 0, then grant signal for client 1 equals 0 from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req1 == 1 & req2 == 0) |-> (gnt1 == 1)",
    "Signals": ["req1", "req2", "gnt1"],
    "Signal Explanations": {
      "req1": "request signal from client 1",
      "req2": "request signal from client 2",
      "gnt1": "grant signal for client 1"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 1 equals 1 and request signal from client 2 equals 0, then grant signal for client 1 equals 1 from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req1 == 1 & state == 0) |-> (gnt2 == 0)",
    "Signals": ["req1", "state", "gnt2"],
    "Signal Explanations": {
      "req1": "request signal from client 1",
      "state": "internal state signal",
      "gnt2": "grant signal for client 2"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 1 equals 1 and internal state signal equals 0, then grant signal for client 2 equals 0 from the current clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req2 == 1 & state == 1) |-> (gnt2 == 1)",
    "Signals": ["req2", "state", "gnt2"],
    "Signal Explanations": {
      "req2": "request signal from client 2",
      "state": "internal state signal",
      "gnt2": "grant signal for client 2"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 2 equals 1 and internal state signal equals 1, then grant signal for client 2 equals 1 from the current clock cycle"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req2 == 0) |-> (gnt2 == 0)",
    "Signals": ["req2", "gnt2"],
    "Signal Explanations": {
      "req2": "request signal from client 2",
      "gnt2": "grant signal for client 2"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 2 equals 0, then grant signal for client 2 equals 0 from the current clock cycle"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "",
    "logical expression": "(req2 == 1 & req1 == 0) |-> (gnt2 == 1)",
    "Signals": ["req2", "req1", "gnt2"],
    "Signal Explanations": {
      "req2": "request signal from client 2",
      "req1": "request signal from client 1",
      "gnt2": "grant signal for client 2"
    },
    "Logical Operators": ["==", "&", "|->"],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "when request signal from client 2 equals 1 and request signal from client 1 equals 0, then grant signal for client 2 equals 1 from the current clock cycle"
  }
}