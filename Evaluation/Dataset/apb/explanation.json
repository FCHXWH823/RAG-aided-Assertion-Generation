{
  "Assertion 1": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(ERROR == 0) |-> (PSLVERR == 0)",
    "Signals": ["ERROR", "PSLVERR"],
    "Signal Explanations": {
      "ERROR": "the signal indicating an error state from the I2C core",
      "PSLVERR": "the error status output from the APB module that directly reflects the I2C core error state"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the error state from the I2C core is inactive (0), then the I2C module error status output must also be inactive (0) SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(ERROR == 1) |-> (PSLVERR == 1)",
    "Signals": ["ERROR", "PSLVERR"],
    "Signal Explanations": {
      "ERROR": "the signal indicating an error state from the I2C core",
      "PSLVERR": "the error status output from the APB module that directly reflects the I2C core error state"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the error state from the I2C core is active (1), then the I2C module error status output must also be active (1) SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(TX_EMPTY == 1) |-> (INT_TX == 1)",
    "Signals": ["TX_EMPTY", "INT_TX"],
    "Signal Explanations": {
      "TX_EMPTY": "the signal indicating that the transmit FIFO of the I2C core is empty",
      "INT_TX": "the interrupt output for the transmit path from the I2C core"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the transmit FIFO is empty, then the transmit interrupt output must be active SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(TX_EMPTY == 0) |-> (INT_TX == 0)",
    "Signals": ["TX_EMPTY", "INT_TX"],
    "Signal Explanations": {
      "TX_EMPTY": "the signal indicating that the transmit FIFO of the I2C core is empty",
      "INT_TX": "the interrupt output for the transmit path from the I2C core"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the transmit FIFO is not empty, then the transmit interrupt output must be inactive SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(RX_EMPTY == 0) |-> (INT_RX == 0)",
    "Signals": ["RX_EMPTY", "INT_RX"],
    "Signal Explanations": {
      "RX_EMPTY": "the signal indicating that the receive FIFO of the I2C core is empty",
      "INT_RX": "the interrupt output for the receive path from the I2C core"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive FIFO is not empty, then the receive interrupt output must be inactive SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(RX_EMPTY == 1) |-> (INT_RX == 1)",
    "Signals": ["RX_EMPTY", "INT_RX"],
    "Signal Explanations": {
      "RX_EMPTY": "the signal indicating that the receive FIFO of the I2C core is empty",
      "INT_RX": "the interrupt output for the receive path from the I2C core"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "checks for equality between the signal and the constant value",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE"
    },
    "Assertion Explaination": "if the receive FIFO is empty, then the receive interrupt output must be active SINCE THE CURRENT CLOCK CYCLE"
  }
}