{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(ERROR == 0) |-> (PSLVERR == 0)",
    "Signals": [
      "ERROR",
      "PSLVERR"
    ],
    "Signal Explanations": {
      "ERROR": "error indicator from the I2C core",
      "PSLVERR": "error signal output to the APB interface"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When error indicator from the I2C core equals 0, then error signal output to the APB interface equals 0 from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(ERROR == 1) |-> (PSLVERR == 1)",
    "Signals": [
      "ERROR",
      "PSLVERR"
    ],
    "Signal Explanations": {
      "ERROR": "error indicator from the I2C core",
      "PSLVERR": "error signal output to the APB interface"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When error indicator from the I2C core equals 1, then error signal output to the APB interface equals 1 from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(TX_EMPTY == 1) |-> (INT_TX == 1)",
    "Signals": [
      "TX_EMPTY",
      "INT_TX"
    ],
    "Signal Explanations": {
      "TX_EMPTY": "transmit FIFO empty indicator",
      "INT_TX": "transmit interrupt signal"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When transmit FIFO empty indicator equals 1, then transmit interrupt signal equals 1 from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(TX_EMPTY == 0) |-> (INT_TX == 0)",
    "Signals": [
      "TX_EMPTY",
      "INT_TX"
    ],
    "Signal Explanations": {
      "TX_EMPTY": "transmit FIFO empty indicator",
      "INT_TX": "transmit interrupt signal"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When transmit FIFO empty indicator equals 0, then transmit interrupt signal equals 0 from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(RX_EMPTY == 0) |-> (INT_RX == 0)",
    "Signals": [
      "RX_EMPTY",
      "INT_RX"
    ],
    "Signal Explanations": {
      "RX_EMPTY": "receive FIFO empty indicator",
      "INT_RX": "receive interrupt signal"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When receive FIFO empty indicator equals 0, then receive interrupt signal equals 0 from the current clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "",
    "logical expression": "(RX_EMPTY == 1) |-> (INT_RX == 1)",
    "Signals": [
      "RX_EMPTY",
      "INT_RX"
    ],
    "Signal Explanations": {
      "RX_EMPTY": "receive FIFO empty indicator",
      "INT_RX": "receive interrupt signal"
    },
    "Logical Operators": [
      "==",
      "|->"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "When receive FIFO empty indicator equals 1, then receive interrupt signal equals 1 from the current clock cycle"
  }
}