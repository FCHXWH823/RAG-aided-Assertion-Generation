{
  "Assertion 1": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(ERROR == 0) |-> (PSLVERR == 0)",
    "Signals": ["ERROR", "PSLVERR"],
    "Signal Explanations": {
      "ERROR": "error status indicator coming from the I2C core",
      "PSLVERR": "error signal output that reflects the I2C core error condition"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true in one evaluation then the right-hand condition must hold at the indicated evaluation"
    },
    "Assertion Explaination": "if the error status indicator from the I2C core is equal to inactive then the error signal output reflecting the I2C core error condition is equal to inactive"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(ERROR == 1) |-> (PSLVERR == 1)",
    "Signals": ["ERROR", "PSLVERR"],
    "Signal Explanations": {
      "ERROR": "error status indicator coming from the I2C core",
      "PSLVERR": "error signal output that reflects the I2C core error condition"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true in one evaluation then the right-hand condition must hold at the indicated evaluation"
    },
    "Assertion Explaination": "if the error status indicator from the I2C core is equal to active then the error signal output reflecting the I2C core error condition is equal to active"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(TX_EMPTY == 1) |-> (INT_TX == 1)",
    "Signals": ["TX_EMPTY", "INT_TX"],
    "Signal Explanations": {
      "TX_EMPTY": "transmit FIFO empty indicator from within the module",
      "INT_TX": "transmit interrupt signal generated by the module"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true then the right-hand condition must subsequently be true"
    },
    "Assertion Explaination": "if the transmit FIFO empty indicator is equal to active then the transmit interrupt signal generated by the module is equal to active"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(TX_EMPTY == 0) |-> (INT_TX == 0)",
    "Signals": ["TX_EMPTY", "INT_TX"],
    "Signal Explanations": {
      "TX_EMPTY": "transmit FIFO empty indicator from within the module",
      "INT_TX": "transmit interrupt signal generated by the module"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true then the right-hand condition must subsequently be true"
    },
    "Assertion Explaination": "if the transmit FIFO empty indicator is equal to inactive then the transmit interrupt signal generated by the module is equal to inactive"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(RX_EMPTY == 0) |-> (INT_RX == 0)",
    "Signals": ["RX_EMPTY", "INT_RX"],
    "Signal Explanations": {
      "RX_EMPTY": "receive FIFO empty indicator from within the module",
      "INT_RX": "receive interrupt signal generated by the module"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true then the right-hand condition must subsequently be true"
    },
    "Assertion Explaination": "if the receive FIFO empty indicator is equal to inactive then the receive interrupt signal generated by the module is equal to inactive"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge PCLK)",
    "disable condition": "none",
    "logical expression": "(RX_EMPTY == 1) |-> (INT_RX == 1)",
    "Signals": ["RX_EMPTY", "INT_RX"],
    "Signal Explanations": {
      "RX_EMPTY": "receive FIFO empty indicator from within the module",
      "INT_RX": "receive interrupt signal generated by the module"
    },
    "Logical Operators": ["==", "|->"],
    "Logical Operators Explanation": {
      "==": "equal to",
      "|->": "non-overlapping implication: if the left-hand condition is true then the right-hand condition must subsequently be true"
    },
    "Assertion Explaination": "if the receive FIFO empty indicator is equal to active then the receive interrupt signal generated by the module is equal to active"
  }
}