{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "count < CYCLES || out == $past(in, CYCLES, en)",
    "Signals": [
      "count",
      "CYCLES",
      "out",
      "in",
      "en"
    ],
    "Signal Explanations": {
      "count": "register that counts cycles",
      "CYCLES": "parameter specifying the number of delay cycles",
      "out": "output delayed signal",
      "in": "input signal to be delayed",
      "en": "enable signal that stalls the delay when not asserted"
    },
    "Logical Operators": [
      "<",
      "||",
      "==",
      "$past"
    ],
    "Logical Operators Explanation": {
      "<": "less than",
      "||": "logical or",
      "==": "equal",
      "$past": "the last several clock cycles (returning the value of a signal from a specified number of cycles in the past under the given enable condition)"
    },
    "Assertion Explaination": "the register counting cycles is less than the parameter specifying the number of delay cycles or the output delayed signal equals the value of the input signal from the last several clock cycles (with a delay of the specified number of cycles under the enable condition)"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "count == CYCLES || out == RESET_VALUE",
    "Signals": [
      "count",
      "CYCLES",
      "out",
      "RESET_VALUE"
    ],
    "Signal Explanations": {
      "count": "register that counts cycles",
      "CYCLES": "parameter specifying the number of delay cycles",
      "out": "output delayed signal",
      "RESET_VALUE": "the constant value to which registers are reset"
    },
    "Logical Operators": [
      "==",
      "||",
      "=="
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "||": "logical or"
    },
    "Assertion Explaination": "the register counting cycles equals the parameter specifying the number of delay cycles or the output delayed signal equals the constant value used for reset"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "!en |=> $stable(out)",
    "Signals": [
      "en",
      "out"
    ],
    "Signal Explanations": {
      "en": "enable signal that stalls the delay when not asserted",
      "out": "output delayed signal"
    },
    "Logical Operators": [
      "!",
      "|=>",
      "$stable"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "|=>": "a non-overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold since the next clock cycle",
      "$stable": "indicates that the signal remains unchanged from one clock cycle to the next"
    },
    "Assertion Explaination": "when the enable signal is reset (0), then the output delayed signal remains unchanged from the next clock cycle"
  }
}