{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "1 |-> ##2 PRESENT_STATE == $past(NEXT_STATE)",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["|->", "##2", "==", "$past"],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##2": "a delay operator meaning that the condition on the right is evaluated 2 clock cycles later",
      "==": "equal",
      "$past": "the value from previous clock cycle(s)"
    },
    "Assertion Explaination": "Property to verify that after 2 clock cycles the current state of the FSM equals the previous value of the next state of the FSM"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "(PRESENT_STATE == ST_IDLE && valid && Hwrite) |-> (NEXT_STATE == ST_WWAIT)",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_IDLE that when the current state of the FSM equals ST_IDLE, transaction is valid, and a write operation is active, then the next state of the FSM equals ST_WWAIT wait from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_IDLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_IDLE that when the current state of the FSM equals ST_IDLE, transaction is valid, and the write operation is not active, then the next state of the FSM equals ST_READ from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_IDLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_IDLE that when the current state of the FSM equals ST_IDLE and transaction is not valid, then the next state of the FSM equals ST_IDLE from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WWAIT && !valid |-> NEXT_STATE == ST_WRITE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WWAIT that when the current state of the FSM equals ST_WWAIT and transaction is not valid, then the next state of the FSM equals ST_WRITE from the current clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WWAIT && valid |-> NEXT_STATE == ST_WRITEP",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WWAIT that when the current state of the FSM equals ST_WWAIT and transaction is valid, then the next state of the FSM equals ST_WRITEP from the currect clock cycle"

  },
  "Assertion 7": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_READ |-> NEXT_STATE == ST_RENABLE",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_READ that when the current state of the FSM equals ST_READ, then the next state of the FSM equals ST_RENABLE from the current clock cycle"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITE && !valid |-> NEXT_STATE == ST_WENABLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WRITE that when the current state of the FSM equals ST_WRITE and transaction is not valid, then the next state of the FSM equals ST_WENABLE from the current clock cycle"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITE && valid |-> NEXT_STATE == ST_WENABLEP",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WRITE that when the current state of the FSM equals ST_WRITE and transaction is valid, then the next state of the FSM equals ST_WENABLEP from the current clock cycle"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITEP |-> NEXT_STATE == ST_WENABLEP",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WRITEP that when the current state of the FSM equals ST_WRITEP, then the next state of the FSM equals ST_WENABLEP from the current clock cycle"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_RENABLE that when the current state of the FSM equals ST_RENABLE and transaction is not valid, then the next state of the FSM equals ST_IDLE from the current clock cycle"
  },
  "Assertion 12": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && valid && Hwrite |-> NEXT_STATE == ST_WWAIT",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_RENABLE that when the current state of the FSM equals ST_RENABLE, and transaction is valid, and a write operation is active, then the next state of the FSM equals ST_WWAIT from the current clock cycle"
  },
  "Assertion 13": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_RENABLE that when the current state of the FSM equals ST_RENABLE, and transaction is valid, and the write operation is not active, then the next state of the FSM equals ST_READ from the current clock cycle"
  },
  "Assertion 14": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLE that when the current state of the FSM equals ST_WENABLE and transaction is not valid, then the next state of the FSM equals ST_IDLE from the current clock cycle"
  },
  "Assertion 15": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && valid && Hwrite |-> NEXT_STATE == ST_WWAIT",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLE that when the current state of the FSM equals ST_WENABLE, and transaction is valid, and a write operation is active, then the next state of the FSM equals ST_WWAIT from the current clock cycle"
  },
  "Assertion 16": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLE that when the current state of the FSM equals ST_WENABLE, transaction is valid, and the write operation is not active, then the next state of the FSM equals ST_READ from the current clock cycle"
  },
  "Assertion 17": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && !valid && Hwritereg |-> NEXT_STATE == ST_WRITE",
    "Signals": ["PRESENT_STATE", "valid", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLEP that when the current state of the FSM equals ST_WENABLEP, and transaction is not valid, and the write register control is active, then the next state of the FSM equals ST_WRITE from the current clock cycle"
  },
  "Assertion 18": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && valid && Hwritereg |-> NEXT_STATE == ST_WRITEP",
    "Signals": ["PRESENT_STATE", "valid", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLEP that when the current state of the FSM equals ST_WENABLEP, and transaction is valid, and the write register control is active, then the next state of the FSM equals ST_WRITEP from the current clock cycle"
  },
  "Assertion 19": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && !Hwritereg |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "Property to verify the transition from ST_WENABLEP that when the current state of the FSM equals ST_WENABLEP and the write register control is not active, then the next state of the FSM equals ST_READ from the current clock cycle"
  }
}