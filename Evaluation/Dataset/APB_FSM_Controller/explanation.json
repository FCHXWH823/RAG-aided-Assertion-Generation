{
  "Assertion 1": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "1 |-> ##2 PRESENT_STATE == $past(NEXT_STATE)",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["|->", "##2", "==", "$past"],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##2": "a delay operator meaning that the condition on the right is evaluated 2 clock cycles later",
      "==": "equal",
      "$past": "the value from previous clock cycle(s)"
    },
    "Assertion Explaination": "if the constant true condition is satisfied then after 2 clock cycles the current state of the FSM equals the computed next state of the FSM from the previous cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "(PRESENT_STATE == ST_IDLE && valid && Hwrite) |-> (NEXT_STATE == ST_WWAIT)",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals idle, transaction is valid, and a write operation is active then the computed next state of the FSM equals write wait SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_IDLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals idle, transaction is valid, and the write operation is not active then the computed next state of the FSM equals read SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_IDLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals idle and transaction is not valid then the computed next state of the FSM equals idle SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WWAIT && !valid |-> NEXT_STATE == ST_WRITE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write wait and transaction is not valid then the computed next state of the FSM equals write SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WWAIT && valid |-> NEXT_STATE == ST_WRITEP",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write wait and transaction is valid then the computed next state of the FSM equals write pipelined SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_READ |-> NEXT_STATE == ST_RENABLE",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals read then the computed next state of the FSM equals read enable SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITE && !valid |-> NEXT_STATE == ST_WENABLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write and transaction is not valid then the computed next state of the FSM equals write enable SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITE && valid |-> NEXT_STATE == ST_WENABLEP",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write and transaction is valid then the computed next state of the FSM equals write enable pipelined SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WRITEP |-> NEXT_STATE == ST_WENABLEP",
    "Signals": ["PRESENT_STATE", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write pipelined then the computed next state of the FSM equals write enable pipelined SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals read enable and transaction is not valid then the computed next state of the FSM equals idle SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 12": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && valid && Hwrite |-> NEXT_STATE == ST_WWAIT",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals read enable, transaction is valid, and a write operation is active then the computed next state of the FSM equals write wait SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 13": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_RENABLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals read enable, transaction is valid, and the write operation is not active then the computed next state of the FSM equals read SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 14": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && !valid |-> NEXT_STATE == ST_IDLE",
    "Signals": ["PRESENT_STATE", "valid", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable and transaction is not valid then the computed next state of the FSM equals idle SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 15": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && valid && Hwrite |-> NEXT_STATE == ST_WWAIT",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable, transaction is valid, and a write operation is active then the computed next state of the FSM equals write wait SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 16": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLE && valid && !Hwrite |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "valid", "Hwrite", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwrite": "a signal indicating a write operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable, transaction is valid, and the write operation is not active then the computed next state of the FSM equals read SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 17": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && !valid && Hwritereg |-> NEXT_STATE == ST_WRITE",
    "Signals": ["PRESENT_STATE", "valid", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable pipelined, transaction is not valid, and the write register control is active then the computed next state of the FSM equals write SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 18": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && valid && Hwritereg |-> NEXT_STATE == ST_WRITEP",
    "Signals": ["PRESENT_STATE", "valid", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "valid": "a signal indicating transaction validity",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable pipelined, transaction is valid, and the write register control is active then the computed next state of the FSM equals write pipelined SINCE THE SAME CLOCK CYCLE"
  },
  "Assertion 19": {
    "clock signal condition": "@(posedge Hclk)",
    "disable condition": "disable iff (!Hresetn)",
    "logical expression": "PRESENT_STATE == ST_WENABLEP && !Hwritereg |-> NEXT_STATE == ST_READ",
    "Signals": ["PRESENT_STATE", "Hwritereg", "NEXT_STATE"],
    "Signal Explanations": {
      "PRESENT_STATE": "the current state of the FSM",
      "Hwritereg": "a control signal for write register operation",
      "NEXT_STATE": "the computed next state of the FSM"
    },
    "Logical Operators": ["==", "&&", "!", "|->", "=="],
    "Logical Operators Explanation": {
      "==": "equal",
      "&&": "logical AND",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE"
    },
    "Assertion Explaination": "if the current state of the FSM equals write enable pipelined and the write register control is not active then the computed next state of the FSM equals read SINCE THE SAME CLOCK CYCLE"
  }
}