{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "valid_wr |-> !full",
    "Signals": [
      "valid_wr",
      "full"
    ],
    "Signal Explanations": {
      "valid_wr": "a valid write request, which means that the write enable is active and the FIFO is not full",
      "full": "a flag indicating that the FIFO has no space for new data (i.e., the FIFO is full)"
    },
    "Logical Operators": [
      "|->",
      "!"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE",
      "!": "a logical negation operator meaning that the value of the signal is inverted"
    },
    "Assertion Explaination": "if there is a valid write request then it must be that the FIFO is not full SINCE THE CURRENT CLOCK CYCLE"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "valid_rd |-> !empty",
    "Signals": [
      "valid_rd",
      "empty"
    ],
    "Signal Explanations": {
      "valid_rd": "a valid read request, which means that the read enable is active and the FIFO is not empty",
      "empty": "a flag indicating that the FIFO contains no data (i.e., the FIFO is empty)"
    },
    "Logical Operators": [
      "|->",
      "!"
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the condition on the left is met then the condition on the right must hold SINCE THE CURRENT CLOCK CYCLE",
      "!": "a logical negation operator meaning that the value of the signal is inverted"
    },
    "Assertion Explaination": "if there is a valid read request then it must be that the FIFO is not empty SINCE THE CURRENT CLOCK CYCLE"
  }
}