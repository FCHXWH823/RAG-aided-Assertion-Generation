{
  "Assertion 1": {
    "clock signal condition": "",
    "disable condition": "",
    "logical expression": "din_en | ((dout0 == 0) & (dout1 == 0) & (dout2 == 0) & (dout3 == 0))",
    "Signals": ["din_en", "dout0", "dout1", "dout2", "dout3"],
    "Signal Explanations": {
      "din_en": "data input enable signal",
      "dout0": "data output signal for address 0",
      "dout1": "data output signal for address 1",
      "dout2": "data output signal for address 2",
      "dout3": "data output signal for address 3"
    },
    "Logical Operators": ["|", "==", "&"],
    "Logical Operators Explanation": {
      "|": "or",
      "==": "equal",
      "&": "and"
    },
    "Assertion Explaination": "either the data input enable signal is asserted or all data output signals for addresses 0, 1, 2, and 3 are equal to zero"
  },
  "Assertion 2": {
    "clock signal condition": "",
    "disable condition": "",
    "logical expression": "~(din_en & (addr == 2'd0)) | ((dout0 == din) & (dout1 == 0) & (dout2 == 0) & (dout3 == 0))",
    "Signals": ["din_en", "addr", "dout0", "din", "dout1", "dout2", "dout3"],
    "Signal Explanations": {
      "din_en": "data input enable signal",
      "addr": "2-bit address signal to select the corresponding data output",
      "dout0": "data output signal for address 0",
      "din": "data input signal",
      "dout1": "data output signal for address 1",
      "dout2": "data output signal for address 2",
      "dout3": "data output signal for address 3"
    },
    "Logical Operators": ["~", "&", "==", "|"],
    "Logical Operators Explanation": {
      "~": "the value is inverted (negation)",
      "&": "and",
      "==": "equal",
      "|": "or"
    },
    "Assertion Explaination": "when the data input enable signal is asserted and the address signal equals 0, then the data output signal for address 0 equals the data input signal and the data output signals for addresses 1, 2, and 3 are equal to zero from the current clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "",
    "disable condition": "",
    "logical expression": "~(din_en & (addr == 2'd1)) | ((dout1 == din) & (dout0 == 0) & (dout2 == 0) & (dout3 == 0))",
    "Signals": ["din_en", "addr", "dout1", "din", "dout0", "dout2", "dout3"],
    "Signal Explanations": {
      "din_en": "data input enable signal",
      "addr": "2-bit address signal to select the corresponding data output",
      "dout1": "data output signal for address 1",
      "din": "data input signal",
      "dout0": "data output signal for address 0",
      "dout2": "data output signal for address 2",
      "dout3": "data output signal for address 3"
    },
    "Logical Operators": ["~", "&", "==", "|"],
    "Logical Operators Explanation": {
      "~": "the value is inverted (negation)",
      "&": "and",
      "==": "equal",
      "|": "or"
    },
    "Assertion Explaination": "when the data input enable signal is asserted and the address signal equals 1, then the data output signal for address 1 equals the data input signal and the data output signals for addresses 0, 2, and 3 are equal to zero from the current clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "",
    "disable condition": "",
    "logical expression": "~(din_en & (addr == 2'd2)) | ((dout2 == din) & (dout0 == 0) & (dout1 == 0) & (dout3 == 0))",
    "Signals": ["din_en", "addr", "dout2", "din", "dout0", "dout1", "dout3"],
    "Signal Explanations": {
      "din_en": "data input enable signal",
      "addr": "2-bit address signal to select the corresponding data output",
      "dout2": "data output signal for address 2",
      "din": "data input signal",
      "dout0": "data output signal for address 0",
      "dout1": "data output signal for address 1",
      "dout3": "data output signal for address 3"
    },
    "Logical Operators": ["~", "&", "==", "|"],
    "Logical Operators Explanation": {
      "~": "the value is inverted (negation)",
      "&": "and",
      "==": "equal",
      "|": "or"
    },
    "Assertion Explaination": "when the data input enable signal is asserted and the address signal equals 2, then the data output signal for address 2 equals the data input signal and the data output signals for addresses 0, 1, and 3 are equal to zero from the current clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "",
    "disable condition": "",
    "logical expression": "~(din_en & (addr == 2'd3)) | ((dout3 == din) & (dout0 == 0) & (dout1 == 0) & (dout2 == 0))",
    "Signals": ["din_en", "addr", "dout3", "din", "dout0", "dout1", "dout2"],
    "Signal Explanations": {
      "din_en": "data input enable signal",
      "addr": "2-bit address signal to select the corresponding data output",
      "dout3": "data output signal for address 3",
      "din": "data input signal",
      "dout0": "data output signal for address 0",
      "dout1": "data output signal for address 1",
      "dout2": "data output signal for address 2"
    },
    "Logical Operators": ["~", "&", "==", "|"],
    "Logical Operators Explanation": {
      "~": "the value is inverted (negation)",
      "&": "and",
      "==": "equal",
      "|": "or"
    },
    "Assertion Explaination": "when the data input enable signal is asserted and the address signal equals 3, then the data output signal for address 3 equals the data input signal and the data output signals for addresses 0, 1, and 2 are equal to zero from the current clock cycle"
  }
}