{
  "Assertion 1": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_IDLE) |-> ##1 (wishbone_st == WB_IDLE) | (wishbone_st == WB_BURST1) | (wishbone_st == WB_WAIT_ACK)",
    "Signals": [
      "wishbone_st"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface"
    },
    "Logical Operators": [
      "==",
      "|->",
      "##1",
      "|"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later",
      "|": "or"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_IDLE, then after one clock cycle delay the wishbone bus state equals WB_IDLE or WB_BURST1 or WB_WAIT_ACK"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_BURST1) & i_wb_ack |-> ##1 (wishbone_st == WB_BURST2)",
    "Signals": [
      "wishbone_st",
      "i_wb_ack"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface",
      "i_wb_ack": "the wishbone bus acknowledgement input signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_BURST1 and the acknowledgement signal is asserted, then after one clock cycle delay the wishbone bus state equals WB_BURST2"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_BURST2) & i_wb_ack |->##1 (wishbone_st == WB_BURST3)",
    "Signals": [
      "wishbone_st",
      "i_wb_ack"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface",
      "i_wb_ack": "the wishbone bus acknowledgement input signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_BURST2 and the acknowledgement signal is asserted, then after one clock cycle delay the wishbone bus state equals WB_BURST3"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_BURST3) & i_wb_ack |->##1 ( wishbone_st == WB_WAIT_ACK)",
    "Signals": [
      "wishbone_st",
      "i_wb_ack"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface",
      "i_wb_ack": "the wishbone bus acknowledgement input signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_BURST3 and the acknowledgement signal is asserted, then after one clock cycle delay the wishbone bus state equals WB_WAIT_ACK"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_WAIT_ACK) & (extra_write_r || !i_wb_ack) |->##1 (wishbone_st == WB_WAIT_ACK)",
    "Signals": [
      "wishbone_st",
      "extra_write_r",
      "i_wb_ack"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface",
      "extra_write_r": "a register flag indicating an extra write request is buffered",
      "i_wb_ack": "the wishbone bus acknowledgement input signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "||",
      "!",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "||": "or",
      "!": "the value of a signal is reset (0)",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_WAIT_ACK and either the extra write flag is set or the acknowledgement signal is not asserted, then after one clock cycle delay the wishbone bus state equals WB_WAIT_ACK"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(wishbone_st == WB_WAIT_ACK) & (!extra_write_r && i_wb_ack) |->##1 (wishbone_st == WB_IDLE)",
    "Signals": [
      "wishbone_st",
      "extra_write_r",
      "i_wb_ack"
    ],
    "Signal Explanations": {
      "wishbone_st": "the 3‐bit state signal of the wishbone bus interface",
      "extra_write_r": "a register flag indicating an extra write request is buffered",
      "i_wb_ack": "the wishbone bus acknowledgement input signal"
    },
    "Logical Operators": [
      "==",
      "&",
      "!",
      "&&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "equal",
      "&": "logical and",
      "!": "the value of a signal is reset (0)",
      "&&": "logical and",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "a temporal delay operator indicating that the condition on the right must hold one clock cycle later"
    },
    "Assertion Explaination": "if the wishbone bus state equals WB_WAIT_ACK and the extra write flag is not set and the acknowledgement signal is asserted, then after one clock cycle delay the wishbone bus state equals WB_IDLE"
  }
}