{
  "Assertion 1": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals idle) |-> ##1 (state register equals idle) | (state register equals first burst state) | (state register equals waiting for acknowledgement)",
    "Signals": [
      "state register"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation, with possible values idle, first burst, or waiting for acknowledgement"
    },
    "Logical Operators": [
      "==",
      "|->",
      "##1",
      "|"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition",
      "|": "a logical OR operator combining multiple conditions"
    },
    "Assertion Explaination": "if the state register equals idle in the current cycle, then one cycle later it must be either idle, in the first burst state, or in the waiting for acknowledgement state"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals first burst state and wishbone acknowledgement is asserted) |-> ##1 (state register equals second burst state)",
    "Signals": [
      "state register",
      "wishbone acknowledgement"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation",
      "wishbone acknowledgement": "the signal from the wishbone bus that indicates the completion of a transfer"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "&": "a logical AND operator requiring both conditions to be true",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition"
    },
    "Assertion Explaination": "if the state register equals first burst state and the wishbone acknowledgement is asserted in the current cycle, then one cycle later the state register must equal the second burst state"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals second burst state and wishbone acknowledgement is asserted) |-> ##1 (state register equals third burst state)",
    "Signals": [
      "state register",
      "wishbone acknowledgement"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation",
      "wishbone acknowledgement": "the signal from the wishbone bus that indicates the completion of a transfer"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "&": "a logical AND operator requiring both conditions to be true",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition"
    },
    "Assertion Explaination": "if the state register equals second burst state and the wishbone acknowledgement is asserted in the current cycle, then one cycle later the state register must equal the third burst state"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals third burst state and wishbone acknowledgement is asserted) |-> ##1 (state register equals waiting for acknowledgement)",
    "Signals": [
      "state register",
      "wishbone acknowledgement"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation",
      "wishbone acknowledgement": "the signal from the wishbone bus that indicates the completion of a transfer"
    },
    "Logical Operators": [
      "==",
      "&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "&": "a logical AND operator requiring both conditions to be true",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition"
    },
    "Assertion Explaination": "if the state register equals third burst state and the wishbone acknowledgement is asserted in the current cycle, then one cycle later the state register must equal waiting for acknowledgement"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals waiting for acknowledgement and (pending extra write is asserted or wishbone acknowledgement is not asserted)) |-> ##1 (state register equals waiting for acknowledgement)",
    "Signals": [
      "state register",
      "pending extra write",
      "wishbone acknowledgement"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation",
      "pending extra write": "a flag indicating that an extra write request is buffered while a transaction is in progress",
      "wishbone acknowledgement": "the signal from the wishbone bus that indicates the completion of a transfer"
    },
    "Logical Operators": [
      "==",
      "&",
      "||",
      "!",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "&": "a logical AND operator requiring both conditions to be true",
      "||": "a logical OR operator where at least one condition must be true",
      "!": "a negation operator that inverts the value of the signal",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition"
    },
    "Assertion Explaination": "if the state register equals waiting for acknowledgement and either a pending extra write is asserted or the wishbone acknowledgement is not asserted in the current cycle, then one cycle later the state register must remain in waiting for acknowledgement"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge i_clk)",
    "disable condition": "",
    "logical expression": "(state register equals waiting for acknowledgement and (pending extra write is not asserted and wishbone acknowledgement is asserted)) |-> ##1 (state register equals idle)",
    "Signals": [
      "state register",
      "pending extra write",
      "wishbone acknowledgement"
    ],
    "Signal Explanations": {
      "state register": "a register that holds the current state of the wishbone bus operation",
      "pending extra write": "a flag indicating that an extra write request is buffered while a transaction is in progress",
      "wishbone acknowledgement": "the signal from the wishbone bus that indicates the completion of a transfer"
    },
    "Logical Operators": [
      "==",
      "&",
      "!",
      "&&",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "==": "checks equality between the current value and a specified state",
      "&": "a logical AND operator at the outer level requiring both conditions to be true",
      "!": "a negation operator that inverts the value of a signal",
      "&&": "a logical AND operator used to combine conditions within a grouped expression",
      "|->": "an implication operator meaning that if the condition on the left is met then the condition on the right must hold at the specified timing",
      "##1": "a delay operator that specifies a delay of one clock cycle before evaluating the right-hand side condition"
    },
    "Assertion Explaination": "if the state register equals waiting for acknowledgement and there is no pending extra write while the wishbone acknowledgement is asserted in the current cycle, then one cycle later the state register must equal idle"
  }
}