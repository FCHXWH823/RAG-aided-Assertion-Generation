{
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!ex_freeze & ex_delayslot_dsi & !ex_delayslot_nop) |-> ##1 (ex_delayslot_nop == 0 && ex_delayslot_dsi == 0)",
    "Signals": [
      "ex_freeze",
      "ex_delayslot_dsi",
      "ex_delayslot_nop"
    ],
    "Signal Explanations": {
      "ex_freeze": "freeze signal for the EX stage",
      "ex_delayslot_dsi": "signal indicating that a delay slot instruction is in the EX stage",
      "ex_delayslot_nop": "signal indicating that a filler nop instruction is in the EX stage"
    },
    "Logical Operators": [
      "!",
      "&",
      "|->",
      "##1",
      "==",
      "&&"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle",
      "==": "equal",
      "&&": "logical AND"
    },
    "Assertion Explaination": "when the freeze signal for the EX stage is reset (0) and the signal indicating that a delay slot instruction is in the EX stage is set (1) and the signal indicating that a filler nop instruction is in the EX stage is reset (0), then the signal indicating that a filler nop instruction is in the EX stage equals 0 and the signal indicating that a delay slot instruction is in the EX stage equals 0 from the next clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!ex_freeze & id_freeze | ex_flushpipe) |-> ##1 (ex_macrc_op == 0)",
    "Signals": [
      "ex_freeze",
      "id_freeze",
      "ex_flushpipe",
      "ex_macrc_op"
    ],
    "Signal Explanations": {
      "ex_freeze": "freeze signal for the EX stage",
      "id_freeze": "freeze signal for the ID stage",
      "ex_flushpipe": "pipeline flush signal for the EX stage",
      "ex_macrc_op": "signal indicating a MAC read operation in the EX stage"
    },
    "Logical Operators": [
      "!",
      "&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "when the freeze signal for the EX stage is reset (0) and either the freeze signal for the ID stage is set (1) or the pipeline flush signal for the EX stage is set (1), then the signal indicating a MAC read operation in the EX stage equals 0 from the next clock cycle"
  },
  "Assertion 3": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(id_flushpipe) |-> ##1 (id_insn == {`OR1200_OR32_NOP, 26'h041_0000})",
    "Signals": [
      "id_flushpipe",
      "id_insn"
    ],
    "Signal Explanations": {
      "id_flushpipe": "pipeline flush signal for the ID stage",
      "id_insn": "instruction signal in the ID stage"
    },
    "Logical Operators": [
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "when the pipeline flush signal for the ID stage is set (1), then the instruction signal in the ID stage equals the constant NOP value from the next clock cycle"
  },
  "Assertion 4": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!ex_freeze & id_freeze | ex_flushpipe) |-> ##1 (ex_insn == {`OR1200_OR32_NOP, 26'h041_0000})",
    "Signals": [
      "ex_freeze",
      "id_freeze",
      "ex_flushpipe",
      "ex_insn"
    ],
    "Signal Explanations": {
      "ex_freeze": "freeze signal for the EX stage",
      "id_freeze": "freeze signal for the ID stage",
      "ex_flushpipe": "pipeline flush signal for the EX stage",
      "ex_insn": "instruction signal in the EX stage"
    },
    "Logical Operators": [
      "!",
      "&",
      "|->",
      "##1",
      "=="
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&": "logical AND",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle",
      "==": "equal"
    },
    "Assertion Explaination": "when the freeze signal for the EX stage is reset (0) and either the freeze signal for the ID stage is set (1) or the pipeline flush signal for the EX stage is set (1), then the instruction signal in the EX stage equals the constant NOP value from the next clock cycle"
  },
  "Assertion 5": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_JALR) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the JALR opcode `OR1200_OR32_JALR, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 6": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_JR) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the JR opcode `OR1200_OR32_JR, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 7": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_RFE) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the RFE opcode `OR1200_OR32_RFE, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 8": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_MFSPR) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the MFSPR opcode `OR1200_OR32_MFSPR, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 9": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_MTSPR) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "if the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the MTSPR opcode `OR1200_OR32_MTSPR, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 10": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_XSYNC) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the XSYNC opcode `OR1200_OR32_XSYNC, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 11": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_SW) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the SW opcode `OR1200_OR32_S, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 12": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_SB) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the SB opcode `OR1200_OR32_SB, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 13": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_ALU) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the ALU opcode `OR1200_OR32_ALU, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  },
  "Assertion 14": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "(!id_freeze && if_insn[31:26] == `OR1200_OR32_SFXX) |-> ##1 (sel_imm ==  1'b0)",
    "Signals": [
      "id_freeze",
      "if_insn",
      "sel_imm"
    ],
    "Signal Explanations": {
      "id_freeze": "freeze signal for the ID stage",
      "if_insn": "instruction signal in the IF stage (opcode field used)",
      "sel_imm": "signal controlling immediate value selection"
    },
    "Logical Operators": [
      "!",
      "&&",
      "==",
      "|->",
      "##1"
    ],
    "Logical Operators Explanation": {
      "!": "the value of a signal is reset (0)",
      "&&": "logical AND",
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "##1": "the condition on the right must hold after one clock cycle"
    },
    "Assertion Explaination": "when the freeze signal for the ID stage is reset (0) and the opcode field of the instruction in the IF stage equals the SFXX opcode `OR1200_OR32_SFXX, then the signal controlling immediate value selection equals 0 from the next clock cycle"
  }
}