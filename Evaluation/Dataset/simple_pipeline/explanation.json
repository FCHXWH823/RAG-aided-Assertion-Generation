{
  "leaf_sv_files": [],
  "Assertion 1": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "count < LATENCY |-> valid_out == 1'b0",
    "Signals": ["count", "LATENCY", "valid_out"],
    "Signal Explanations": {
      "count": "an integer register used to count the number of cycles until the pipeline latency is reached",
      "LATENCY": "the cycle latency of the pipeline",
      "valid_out": "the valid output signal of the pipeline indicating that the output is valid"
    },
    "Logical Operators": ["<", "|->", "=="],
    "Logical Operators Explanation": {
      "<": "less-than comparison",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "==": "equal"
    },
    "Assertion Explaination": "when the integer register used for counting cycles is less than the cycle latency, then the valid output signal equals 0 from the current clock cycle"
  },
  "Assertion 2": {
    "clock signal condition": "@(posedge clk)",
    "disable condition": "disable iff (rst)",
    "logical expression": "count == LATENCY |-> valid_out == $past(valid_in, LATENCY)",
    "Signals": ["count", "LATENCY", "valid_out", "valid_in"],
    "Signal Explanations": {
      "count": "an integer register used to count the number of cycles until the pipeline latency is reached",
      "LATENCY": "the cycle latency of the pipeline",
      "valid_out": "the valid output signal of the pipeline indicating that the output is valid",
      "valid_in": "the valid input signal, which is asserted when the input data is valid"
    },
    "Logical Operators": ["==", "|->", "$past"],
    "Logical Operators Explanation": {
      "==": "equal",
      "|->": "an overlapping implication operator meaning that if the conditions on the left are met then the condition on the right must hold SINCE THE SAME CLOCK CYCLE",
      "$past": "returns the value of a signal a specified number of clock cycles in the past"
    },
    "Assertion Explaination": "when the integer register used for counting cycles equals the cycle latency, then the valid output signal equals the valid input signal LATENCY cycles in the past from the current clock cycle"
  }
}