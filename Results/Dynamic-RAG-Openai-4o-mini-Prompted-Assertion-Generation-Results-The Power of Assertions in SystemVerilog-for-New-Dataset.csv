Master Module,Code,golden_assertions,llm_assertions
gray,"module gray #(parameter CBITS = 8) (input clk, input rst, output reg [CBITS-1:0] gray_cnt, output reg sig);
  reg [CBITS-1:0] cnt;
  always@(posedge clk, posedge rst) begin
    if (rst) begin
      cnt = 0;
    end
    else begin
      cnt = cnt + 1;
      gray_cnt = (cnt) ^ ((cnt) >> 1);
      if(gray_cnt == 0)
        sig = 1;
      else
        sig = 0;
    end
  end
  // F G (rst = F) -> G F (sig = T)
endmodule","{
  ""Assertion 1"": {
    ""clock signal condition"": ""@(posedge clk)"",
    ""disable condition"": """",
    ""logical expression"": ""s_eventually (rst || sig == 1)"",
    ""Signals"": [""rst"", ""sig""],
    ""Signal Explanations"": {
      ""rst"": ""reset signal"",
      ""sig"": ""signal that indicates when the computed Gray code counter equals 0""
    },
    ""Logical Operators"": [""s_eventually"", ""||"", ""==""],
    ""Logical Operators Explanation"": {
      ""s_eventually"": ""a temporal operator indicating that the contained condition is required to occur at some future clock cycle (eventually)"",
      ""||"": ""or"",
      ""=="": ""equal""
    },
    ""Assertion Explaination"": ""eventually reset signal is set or signal that indicates when the computed Gray code counter equals 0 is set (1)""
  }
}","{
""Assertion 1"": ""assert property (rst || sig);""
}"
